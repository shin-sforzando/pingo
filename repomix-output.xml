This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.storybook/
  decorators.tsx
  main.ts
  next-intl.ts
  preview.ts
public/
  favicon/
    android-chrome-192x192.png
    android-chrome-512x512.png
    apple-touch-icon.png
    favicon-16x16.png
    favicon-32x32.png
    favicon.ico
    site.webmanifest
  images/
    effects/
      bingo.png
      clear.png
      ng.png
      ok.png
    guest-avatar-placeholder.png
    hacking-papa_512x512.png
    pingo_512x512.png
    pingo.svg
scripts/
  docker-build.ts
src/
  app/
    api/
      auth/
        login/
          route.test.ts
          route.ts
        logout/
          route.test.ts
          route.ts
        me/
          route.test.ts
          route.ts
        register/
          route.test.ts
          route.ts
        update/
          route.test.ts
          route.ts
      game/
        [gameId]/
          board/
            route.ts
          events/
            route.test.ts
            route.ts
          join/
            route.test.ts
            route.ts
          participants/
            route.ts
          playerBoard/
            [userId]/
              route.test.ts
              route.ts
          submission/
            [submissionId]/
              route.test.ts
              route.ts
            analyze/
              route.ts
            route.test.ts
            route.ts
          route.test.ts
          route.ts
        create/
          route.test.ts
          route.ts
        public/
          route.ts
      health/
        route.test.ts
        route.ts
      image/
        check/
          route.test.ts
          route.ts
        getUploadUrl/
          route.test.ts
          route.ts
        upload/
          route.ts
      subjects/
        check/
          route.test.ts
          route.ts
        generate/
          route.test.ts
          route.ts
    debug/
      image-upload/
        page.tsx
    game/
      [gameId]/
        components/
          ErrorDisplay.tsx
          GameHeader.tsx
        hooks/
          useGameData.test.ts
          useGameData.ts
          useImageSubmission.ts
        share/
          page.stories.tsx
          page.tsx
        utils/
          gameDataTransforms.ts
        page.tsx
      create/
        page.browser.test.tsx
        page.tsx
      join/
        page.browser.test.tsx
        page.tsx
    favicon.ico
    globals.css
    layout.tsx
    loading.stories.tsx
    loading.tsx
    page.browser.test.tsx
    page.tsx
  components/
    auth/
      AuthGuard.tsx
      LoginForm.stories.tsx
      LoginForm.tsx
      RegisterForm.stories.tsx
      RegisterForm.tsx
    game/
      BingoBoard.stories.tsx
      BingoBoard.tsx
      BingoCell.stories.tsx
      BingoCell.tsx
      DndContextWrapper.tsx
      GameInfo.stories.tsx
      GameInfo.tsx
      GameInfoCard.browser.test.tsx
      GameInfoCard.stories.tsx
      GameInfoCard.tsx
      ImageUpload.stories.tsx
      ImageUpload.tsx
      InfoCard.tsx
      ParticipantsList.stories.tsx
      ParticipantsList.tsx
      QRCodeCard.stories.tsx
      QRCodeCard.tsx
      SubjectItem.stories.tsx
      SubjectItem.tsx
      SubjectList.stories.tsx
      SubjectList.tsx
      SubmissionResult.browser.test.tsx
      SubmissionResult.stories.tsx
      SubmissionResult.tsx
    layout/
      Footer.browser.test.tsx
      Footer.stories.tsx
      Footer.tsx
      Header.browser.test.tsx
      Header.stories.tsx
      Header.tsx
      LanguageSwitcher.browser.test.tsx
      LanguageSwitcher.stories.tsx
      LanguageSwitcher.tsx
      NotificationDrawer.browser.test.tsx
      NotificationDrawer.stories.tsx
      NotificationDrawer.tsx
      NotificationIcon.browser.test.tsx
      NotificationIcon.stories.tsx
      NotificationIcon.tsx
      UserMenu.browser.test.tsx
      UserMenu.stories.tsx
      UserMenu.tsx
    magicui/
      animated-grid-pattern.tsx
      AnimatedGridPattern.stories.tsx
      Confetti.stories.tsx
      confetti.tsx
      hyper-text.stories.tsx
      hyper-text.tsx
      shine-border.tsx
      ShineBorder.stories.tsx
    ui/
      avatar.tsx
      badge.tsx
      Button.stories.tsx
      button.tsx
      Calendar.stories.tsx
      calendar.tsx
      Card.stories.tsx
      card.tsx
      drawer.tsx
      dropdown-menu.tsx
      Form.stories.tsx
      form.tsx
      Input.stories.tsx
      input.tsx
      label.tsx
      popover.tsx
      separator.tsx
      skeleton.tsx
      switch.tsx
      tabs.tsx
      textarea.tsx
      translated-form-message.tsx
  contexts/
    AuthContext.tsx
  hooks/
    useAuthenticatedFetch.test.ts
    useAuthenticatedFetch.ts
    useGameJoin.test.ts
    useGameJoin.ts
    useGameParticipation.test.ts
    useGameParticipation.ts
    useParticipatingGames.test.ts
    useParticipatingGames.ts
  i18n/
    config.ts
    request.ts
  lib/
    firebase/
      admin-collections.ts
      admin.test.ts
      admin.ts
      client.ts
    api-utils.ts
    constants.ts
    image-utils.test.ts
    image-utils.ts
    utils.ts
  services/
    game.ts
    image-upload.ts
    locale.test.ts
    locale.ts
  test/
    helpers/
      api-test-helpers.ts
      auth-test-helpers.ts
      firebase-test-helpers.ts
      game-test-helpers.ts
  types/
    common.ts
    firestore.ts
    game.ts
    index.ts
    schema.ts
    user.ts
.mcp.json
CLAUDE.md
cloudbuild.yaml
components.json
cors.json
Dockerfile
middleware.ts
next.config.ts
package.json
playwright.config.ts
postcss.config.mjs
repomix.config.json
tsconfig.build.json
tsconfig.json
vitest.browser.setup.ts
vitest.config.mts
vitest.setup.ts
vitest.shims.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".storybook/decorators.tsx">
import type React from "react";
⋮----
import { AuthContext } from "../src/contexts/AuthContext";
⋮----
export const withMockAuthContext = (Story: React.ComponentType) =>
</file>

<file path=".storybook/next-intl.ts">
import en from "../messages/en.json";
import ja from "../messages/ja.json";
</file>

<file path="public/favicon/site.webmanifest">
{
  "name": "",
  "short_name": "",
  "icons": [
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}
</file>

<file path="public/images/pingo.svg">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="100%" height="100%" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;">
    <g transform="matrix(1.95985,0,0,2.2271,-263.36,-256.233)">
        <path d="M390,163.311C390,139.407 367.947,120 340.783,120L189.217,120C162.053,120 140,139.407 140,163.311L140,296.689C140,320.593 162.053,340 189.217,340L340.783,340C367.947,340 390,320.593 390,296.689L390,163.311Z" style="fill:rgb(8,217,214);stroke:rgb(37,42,52);stroke-width:6.36px;"/>
    </g>
    <g transform="matrix(1,0,0,1,-59.4958,328.623)">
        <text x="189.896px" y="104.977px" style="font-family:'MPLUS1Code-Bold', 'M PLUS 1 Code';font-size:480px;fill:rgb(255,46,99);">P</text>
    </g>
</svg>
</file>

<file path="src/app/api/health/route.test.ts">
import { NextResponse } from "next/server";
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { GET } from "./route";
</file>

<file path="src/app/globals.css">
:root {
⋮----
@theme inline {
⋮----
body {
⋮----
@layer base {
⋮----
* {
</file>

<file path="src/app/loading.tsx">
import { HyperText } from "@/components/magicui/hyper-text";
⋮----
export default function Loading()
</file>

<file path="src/components/auth/LoginForm.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
⋮----
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { TranslatedFormMessage } from "@/components/ui/translated-form-message";
import { useAuth } from "@/contexts/AuthContext";
import type { UserLoginData } from "@/types/schema";
import { userLoginSchema } from "@/types/schema";
⋮----
interface LoginFormProps {
  onSuccess?: () => void;
  onError?: (error: Error) => void;
}
⋮----
async function onSubmit(values: UserLoginData)
⋮----
<form onSubmit=
</file>

<file path="src/components/game/BingoCell.tsx">
import { cn } from "@/lib/utils";
import type { Cell } from "@/types/schema";
⋮----
export type BingoCellState = "CLOSE" | "OPEN" | "FREE";
⋮----
export interface BingoCellProps {



  cell: Cell;



  state?: BingoCellState;



  className?: string;



  onClick?: () => void;



  isPartOfCompletedLine?: boolean;
}
⋮----
isInteractive
? (e) =>
</file>

<file path="src/components/game/DndContextWrapper.tsx">
import { DndContext, type DndContextProps } from "@dnd-kit/core";
import type { PropsWithChildren } from "react";
⋮----
export interface IDndContextWrapper
  extends DndContextProps,
    PropsWithChildren {}
⋮----
export default function DndContextWrapper(props: IDndContextWrapper)
</file>

<file path="src/components/game/InfoCard.tsx">
import type { ReactNode } from "react";
⋮----
export interface InfoCardProps {
  title: string;
  value: string;
  icon?: ReactNode;
}
⋮----
export function InfoCard(
</file>

<file path="src/components/magicui/animated-grid-pattern.tsx">
import { motion } from "motion/react";
import {
  type ComponentPropsWithoutRef,
  useCallback,
  useEffect,
  useId,
  useRef,
  useState,
} from "react";
⋮----
import { cn } from "@/lib/utils";
⋮----
export interface AnimatedGridPatternProps
  extends ComponentPropsWithoutRef<"svg"> {
  width?: number;
  height?: number;
  x?: number;
  y?: number;
  strokeDasharray?: string | number;
  numSquares?: number;
  maxOpacity?: number;
  duration?: number;
  repeatDelay?: number;
}
⋮----
export function AnimatedGridPattern({
  width = 40,
  height = 40,
  x = -1,
  y = -1,
  strokeDasharray = 0,
  numSquares = 50,
  className,
  maxOpacity = 0.5,
  duration = 4,
  repeatDelay = 0.5,
  ...props
}: AnimatedGridPatternProps)
⋮----
const updateSquarePosition = (id: number) =>
⋮----
className=
</file>

<file path="src/components/magicui/shine-border.tsx">
import { cn } from "@/lib/utils";
⋮----
interface ShineBorderProps extends React.HTMLAttributes<HTMLDivElement> {




  borderWidth?: number;




  duration?: number;




  shineColor?: string | string[];
}
⋮----
className={cn(
        "pointer-events-none absolute inset-0 size-full rounded-[inherit] will-change-[background-position] motion-safe:animate-shine",
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/components/ui/avatar.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn(
        "flex size-full items-center justify-center rounded-full bg-muted",
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/components/ui/card.tsx">
import { cn } from "@/lib/utils";
⋮----
function CardContent(
</file>

<file path="src/components/ui/drawer.tsx">
import { Drawer as DrawerPrimitive } from "vaul";
⋮----
import { cn } from "@/lib/utils";
⋮----
function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>)
⋮----
function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>)
⋮----
function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>)
⋮----
function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>)
⋮----
function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>)
⋮----
className=
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";
⋮----
import { cn } from "@/lib/utils";
⋮----
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>)
⋮----
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>)
⋮----
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>)
⋮----
className=
⋮----
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>)
⋮----
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
})
</file>

<file path="src/components/ui/form.tsx">
import { Slot } from "@radix-ui/react-slot";
⋮----
import {
  Controller,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
  FormProvider,
  useFormContext,
  useFormState,
} from "react-hook-form";
⋮----
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
⋮----
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};
⋮----
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) =>
⋮----
const useFormField = () =>
⋮----
type FormItemContextValue = {
  id: string;
};
⋮----
function FormItem(
⋮----
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>)
⋮----
className=
⋮----
function FormControl(
⋮----
function FormMessage(
</file>

<file path="src/components/ui/input.tsx">
import { cn } from "@/lib/utils";
⋮----
function Input(
⋮----
className=
</file>

<file path="src/components/ui/label.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn(
        "flex select-none items-center gap-2 font-medium text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-50 group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50",
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/components/ui/popover.tsx">
import { cn } from "@/lib/utils";
⋮----
function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>)
⋮----
function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>)
</file>

<file path="src/components/ui/separator.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn(
        "shrink-0 bg-border data-[orientation=horizontal]:h-px data-[orientation=vertical]:h-full data-[orientation=horizontal]:w-full data-[orientation=vertical]:w-px",
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn("animate-pulse rounded-md bg-accent", className)}
      {...props}
    />
  );
</file>

<file path="src/components/ui/switch.tsx">
import { cn } from "@/lib/utils";
⋮----
className=
</file>

<file path="src/components/ui/tabs.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn("flex-1 outline-none", className)}
      {...props}
    />
  );
</file>

<file path="src/components/ui/textarea.tsx">
import { cn } from "@/lib/utils";
⋮----
className={cn(
        "field-sizing-content flex min-h-16 w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-xs outline-none transition-[color,box-shadow] placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 md:text-sm",
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/i18n/config.ts">
export type Locale = (typeof locales)[number];
</file>

<file path="src/lib/firebase/client.ts">
import { getApp, getApps, initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
</file>

<file path="src/lib/api-utils.ts">
import { NextResponse } from "next/server";
⋮----
export async function withErrorHandling<T>(
  operation: () => Promise<T>,
  errorMessage: string,
)
⋮----
export function validateGameId(gameId: string | undefined)
</file>

<file path="src/lib/constants.ts">

</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { format, formatRelative } from "date-fns";
import { enUS, ja } from "date-fns/locale";
import { twMerge } from "tailwind-merge";
⋮----
export function cn(...inputs: ClassValue[])
⋮----
export function formatDate(
  date: Date | number | { toDate: () => Date } | null | undefined,
  formatStr = "PPP",
  locale = "ja",
)
⋮----
// Handle Firestore Timestamp objects
⋮----
/**
 * Formats a date relative to the current date (e.g., "yesterday", "2 days ago").
 *
 * @param date - Date object, timestamp, or Firestore timestamp
 * @param locale - Optional locale string (default: 'ja')
 * @returns Relative date string
 */
export function formatRelativeDate(
  date: Date | number | { toDate: () => Date } | null | undefined,
  locale = "ja",
)
⋮----
// Handle Firestore Timestamp objects
</file>

<file path="src/types/common.ts">
export enum Role {
  CREATOR = "creator",
  ADMIN = "admin",
  PARTICIPANT = "participant",
}
⋮----
export enum GameStatus {
  ACTIVE = "active",
  ENDED = "ended",
  ARCHIVED = "archived",
}
⋮----
export enum ProcessingStatus {
  UPLOADED = "uploaded",
  CONTENT_CHECKING = "content_checking",
  ANALYZING = "analyzing",
  ANALYZED = "analyzed",
  ERROR = "error",
}
⋮----
export enum AcceptanceStatus {
  ACCEPTED = "accepted",
  INAPPROPRIATE_CONTENT = "inappropriate_content",
  NO_MATCH = "no_match",
}
⋮----
export enum NotificationType {

  SYSTEM_NOTIFICATION = "system_notification",


  ACCOUNT_REGISTERED = "account_registered",
  LOGIN = "login",
  LOGOUT = "logout",


  GAME_INVITATION = "game_invitation",
  GAME_STARTED = "game_started",
  GAME_ENDED = "game_ended",


  PLAYER_ACHIEVED_BINGO = "player_achieved_bingo",
  PLAYER_COMPLETED_GAME = "player_completed_game",
  SOMEONE_ACHIEVED_BINGO = "someone_achieved_bingo",
  SOMEONE_COMPLETED_GAME = "someone_completed_game",


  NEW_SUBMISSION = "new_submission",
  SUBMISSION_ACCEPTED = "submission_accepted",
  SUBMISSION_REJECTED = "submission_rejected",
}
⋮----
export enum NotificationDisplayType {
  TOAST = "toast",
  POPUP = "popup",
}
⋮----
export enum LineType {
  ROW = "row",
  COLUMN = "column",
  DIAGONAL = "diagonal",
}
⋮----
export interface CompletedLine {
  type: LineType;
  index: number;
  completedAt: Date;
}
⋮----
export interface CellPosition {
  x: number;
  y: number;
}
⋮----
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: unknown;
  };
}
</file>

<file path="src/types/user.ts">
import type { NotificationDisplayType, NotificationType } from "./common";
import type { TimestampInterface } from "./firestore";
import { dateToTimestamp, timestampToDate } from "./firestore";
import type { Notification, User } from "./schema";
⋮----
export interface UserDocument {
  id: string;
  username: string;
  passwordHash: string;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
  lastLoginAt: TimestampInterface | null;
  participatingGames: string[];
  gameHistory: string[];
  memo?: string;
  isTestUser: boolean;
}
⋮----
export interface NotificationDocument {
  id: string;
  type: NotificationType;
  displayType: NotificationDisplayType;
  message: string;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
  read: boolean;
  relatedGameId?: string;
  details?: Record<string, unknown>;
}
⋮----
export function userFromFirestore(doc: UserDocument): User
⋮----
export function userToFirestore(user: User, passwordHash = ""): UserDocument
⋮----
// Create base document without optional fields
⋮----
export function notificationFromFirestore(
  doc: NotificationDocument,
): Notification
⋮----
export function notificationToFirestore(
  notification: Notification,
): NotificationDocument
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from "@playwright/test";
</file>

<file path="postcss.config.mjs">

</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="vitest.setup.ts">
import { resolve } from "node:path";
import { config } from "dotenv";
</file>

<file path="vitest.shims.d.ts">

</file>

<file path=".storybook/main.ts">
import type { StorybookConfig } from "@storybook/nextjs";
</file>

<file path=".storybook/preview.ts">
import type { Preview } from "@storybook/nextjs";
import { MINIMAL_VIEWPORTS } from "storybook/viewport";
⋮----
import { withMockAuthContext } from "./decorators";
⋮----
import nextIntl from "./next-intl";
</file>

<file path="scripts/docker-build.ts">
import type { ExecSyncOptions } from "node:child_process";
import { execSync } from "node:child_process";
⋮----
interface FirebaseCredentials {
  projectId: string;
  clientEmail: string;
  privateKey: string;
}
⋮----
async function extractFirebaseCredentials(
  jsonFilePath: string,
): Promise<FirebaseCredentials>
⋮----
function parseArguments(args: string[]):
⋮----
async function main(): Promise<void>
</file>

<file path="src/app/game/[gameId]/hooks/useGameData.test.ts">
import { renderHook, waitFor } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import type { User } from "@/types/schema";
import { useGameData } from "./useGameData";
</file>

<file path="src/app/game/[gameId]/utils/gameDataTransforms.ts">
import type { BingoCellState } from "@/components/game/BingoCell";
import type { CellState, CompletedLine } from "@/types/schema";
⋮----
export function convertCellStatesToBingoFormat(
  rawCellStates: Record<string, CellState>,
): Record<string, BingoCellState>
⋮----
export function convertCompletedLinesToIndices(
  completedLines: CompletedLine[],
): number[][]
⋮----
export function getLatestSubmission<T>(submissions: T[]): T | null
⋮----
export function findMatchedCellSubject(
  cellId: string | null | undefined,
  gameBoard: Array<{ id: string; subject: string }> | null,
): string | null
</file>

<file path="src/app/game/join/page.browser.test.tsx">
import { faker } from "@faker-js/faker";
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { afterAll, beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import { mockAuthGuard } from "@/test/helpers/auth-test-helpers";
import enMessages from "../../../../messages/en.json";
import jaMessages from "../../../../messages/ja.json";
⋮----
import JoinGamePage from "./page";
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { NextIntlClientProvider } from "next-intl";
import { getLocale, getTranslations } from "next-intl/server";
import { Footer } from "@/components/layout/Footer";
import { Header } from "@/components/layout/Header";
import { AnimatedGridPattern } from "@/components/magicui/animated-grid-pattern";
import { AuthProvider } from "@/contexts/AuthContext";
⋮----
export async function generateMetadata(): Promise<Metadata>
</file>

<file path="src/app/loading.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import Loading from "./loading";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/app/page.browser.test.tsx">
import { page } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { ulid } from "ulid";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import { AuthProvider } from "@/contexts/AuthContext";
import type { User } from "@/types/schema";
import enMessages from "../../messages/en.json";
import jaMessages from "../../messages/ja.json";
import HomePage from "./page";
</file>

<file path="src/components/auth/LoginForm.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { expect, userEvent, within } from "storybook/test";
⋮----
import { LoginForm } from "./LoginForm";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/auth/RegisterForm.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { expect, userEvent, within } from "storybook/test";
⋮----
import { RegisterForm } from "./RegisterForm";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/auth/RegisterForm.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
⋮----
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { TranslatedFormMessage } from "@/components/ui/translated-form-message";
import { useAuth } from "@/contexts/AuthContext";
import type { UserCreationData } from "@/types/schema";
import { userCreationSchema } from "@/types/schema";
⋮----
type ExtendedUserCreationData = UserCreationData &
  z.infer<typeof confirmPasswordSchema>;
⋮----
interface RegisterFormProps {
  onSuccess?: () => void;
  onError?: (error: Error) => void;
}
⋮----
async function onSubmit(values: ExtendedUserCreationData)
⋮----
<form onSubmit=
</file>

<file path="src/components/game/BingoBoard.tsx">
import { cn } from "@/lib/utils";
import type { Cell } from "@/types/schema";
import { BingoCell, type BingoCellState } from "./BingoCell";
⋮----
export interface BingoBoardProps {



  cells: Cell[];



  cellStates?: Record<string, BingoCellState>;




  completedLines?: number[][];



  className?: string;



  onCellClick?: (cellId: string) => void;
}
⋮----
// Sort cells by position
⋮----
// Create a flat array of all cell indices that are part of completed lines
⋮----
// Check if a cell is part of a completed line
const isCellInCompletedLine = (index: number) =>
⋮----
// Get the state for a cell
const getCellState = (cell: Cell, index: number): BingoCellState =>
⋮----
// Center cell (index 12) is always FREE
⋮----
state=
isPartOfCompletedLine=
</file>

<file path="src/components/game/BingoCell.stories.tsx">
import { fakerJA as faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { BingoCell } from "./BingoCell";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/game/GameInfoCard.browser.test.tsx">
import { page, userEvent } from "@vitest/browser/context";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import type { GameInfo } from "@/types/schema";
import { GameInfoCard } from "./GameInfoCard";
⋮----
expect(container.textContent).not.toContain("Family friendly game");
⋮----
const usersIcon = container.querySelector('svg[class*="lucide-users"]');
expect(usersIcon).toBeNull();
⋮----
const calendarIcon = container.querySelector(
        'svg[class*="lucide-calendar"]',
      );
expect(calendarIcon).toBeNull();
⋮----
const card = page.getByText("Summer Adventure");
await userEvent.click(card);
⋮----
expect(mockOnClick).toHaveBeenCalledTimes(1);
expect(mockOnClick).toHaveBeenCalledWith(mockGame);
⋮----
expect(card).toBeDefined();
expect(card?.className).toContain("hover:bg-muted/50");
</file>

<file path="src/components/game/GameInfoCard.stories.tsx">
import type { Meta, StoryObj } from "@storybook/react";
import { fn } from "storybook/test";
import type { GameInfo } from "@/types/schema";
import { GameInfoCard } from "./GameInfoCard";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/game/GameInfoCard.tsx">
import { formatDistanceToNow } from "date-fns";
import { enUS, ja } from "date-fns/locale";
import { Calendar, Users } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import type { GameInfo } from "@/types/schema";
⋮----
export interface GameInfoCardProps {



  game: GameInfo;



  onClick: (game: GameInfo) => void;



  locale: string;



  className?: string;
}
</file>

<file path="src/components/game/QRCodeCard.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { QRCodeCard } from "./QRCodeCard";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/game/QRCodeCard.tsx">
import { QRCodeSVG } from "qrcode.react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
⋮----
export interface QRCodeCardProps {
  gameId: string;
  url: string;
  size?: number;
}
⋮----
export function QRCodeCard(
</file>

<file path="src/components/game/SubjectItem.stories.tsx">
import { fakerJA as faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useState } from "react";
import { SubjectItem } from "./SubjectItem";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
const renderWithState = (args: React.ComponentProps<typeof SubjectItem>) =>
⋮----
onDelete=
⋮----
// Different indices
⋮----
index: 23, // Last index in a 5x5 bingo board (excluding center)
⋮----
// With custom styling
</file>

<file path="src/components/game/SubjectItem.tsx">
import { GripVertical, X } from "lucide-react";
import { useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";
⋮----
export interface SubjectItemProps {



  subject: string;



  isAdopted: boolean;



  index: number;



  className?: string;



  onSubjectChange: (value: string, index: number) => void;



  onDelete: (index: number) => void;



  isDragging?: boolean;



  dragHandleProps?: Record<string, unknown>;



  error?: string;
}
⋮----
const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleInputBlur = () =>
</file>

<file path="src/components/game/SubjectList.stories.tsx">
import { faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useState } from "react";
import { type Subject, SubjectList } from "./SubjectList";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
const generateSampleSubjects = (
  count: number,
  withErrors = false,
): Subject[] =>
⋮----
const renderWithState = (args: React.ComponentProps<typeof SubjectList>) =>
</file>

<file path="src/components/game/SubjectList.tsx">
import {
  closestCenter,
  type DragEndEvent,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Plus } from "lucide-react";
import dynamic from "next/dynamic";
import { useTranslations } from "next-intl";
import { useId } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { SubjectItem } from "./SubjectItem";
⋮----
export interface Subject {
  id: string;
  text: string;
  error?: string;
}
⋮----
export interface SubjectListProps {



  subjects: Subject[];



  maxAdopted?: number;



  className?: string;



  onSubjectsChange: (subjects: Subject[]) => void;
}
⋮----
const handleSubjectChange = (value: string, index: number) =>
⋮----
const handleDelete = (index: number) =>
⋮----
const handleAddSubject = () =>
⋮----
// Get translations
⋮----
// Handle drag end event
const handleDragEnd = (event: DragEndEvent) =>
⋮----
// Dynamic import DndContextWrapper with SSR disabled
</file>

<file path="src/components/layout/Footer.browser.test.tsx">
import { page } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import type React from "react";
import { describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
import { Footer } from "./Footer";
</file>

<file path="src/components/layout/Footer.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { Footer } from "./Footer";
⋮----
type Story = StoryObj<typeof Footer>;
</file>

<file path="src/components/layout/Header.browser.test.tsx">
import { page } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
import { Header } from "./Header";
</file>

<file path="src/components/layout/LanguageSwitcher.browser.test.tsx">
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
import { LanguageSwitcher } from "./LanguageSwitcher";
</file>

<file path="src/components/layout/LanguageSwitcher.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { LanguageSwitcher } from "./LanguageSwitcher";
⋮----
type Story = StoryObj<typeof LanguageSwitcher>;
</file>

<file path="src/components/layout/NotificationDrawer.browser.test.tsx">
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
import { NotificationDrawer } from "./NotificationDrawer";
</file>

<file path="src/components/layout/NotificationIcon.browser.test.tsx">
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import jaMessages from "../../../messages/ja.json";
import { NotificationIcon } from "./NotificationIcon";
⋮----
onClick={() => onOpenChange(false)}
onKeyDown=
</file>

<file path="src/components/layout/NotificationIcon.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { NotificationIcon } from "./NotificationIcon";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/layout/NotificationIcon.tsx">
import { Bell } from "lucide-react";
import type { ReactElement } from "react";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { NotificationDrawer } from "./NotificationDrawer";
⋮----
type NotificationIconProps = {
  hasUnreadNotifications?: boolean;
};
</file>

<file path="src/components/layout/UserMenu.browser.test.tsx">
import { faker } from "@faker-js/faker";
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
⋮----
import { UserMenu } from "./UserMenu";
</file>

<file path="src/components/magicui/AnimatedGridPattern.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { AnimatedGridPattern } from "./animated-grid-pattern";
⋮----
type Story = StoryObj<typeof AnimatedGridPattern>;
</file>

<file path="src/components/magicui/hyper-text.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { HyperText } from "./hyper-text";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/magicui/hyper-text.tsx">
import { AnimatePresence, type MotionProps, motion } from "motion/react";
import { useEffect, useRef, useState } from "react";
import { cn } from "@/lib/utils";
⋮----
type CharacterSet = string[] | readonly string[];
⋮----
interface HyperTextProps extends MotionProps {

  children: string;

  className?: string;

  duration?: number;

  delay?: number;

  as?: React.ElementType;

  startOnView?: boolean;

  animateOnHover?: boolean;

  characterSet?: CharacterSet;
}
⋮----
const getRandomInt = (max: number): number
⋮----
const handleAnimationTrigger = () =>
⋮----
// Handle animation start based on view or delay
⋮----
const animate = (currentTime: number) =>
⋮----
className=
</file>

<file path="src/components/magicui/ShineBorder.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { ShineBorder } from "./shine-border";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/ui/badge.tsx">
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
⋮----
import { cn } from "@/lib/utils";
⋮----
className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
</file>

<file path="src/components/ui/calendar.tsx">
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react";
⋮----
import {
  type DayButton,
  DayPicker,
  getDefaultClassNames,
} from "react-day-picker";
⋮----
import { Button, buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";
⋮----
className={cn("size-4", className)}
                {...props}
              />
            );
⋮----
function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>)
⋮----
data-day=
⋮----
className={cn(
        "flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-start=true]:rounded-l-md data-[range-end=true]:bg-primary data-[range-middle=true]:bg-accent data-[range-start=true]:bg-primary data-[selected-single=true]:bg-primary data-[range-end=true]:text-primary-foreground data-[range-middle=true]:text-accent-foreground data-[range-start=true]:text-primary-foreground data-[selected-single=true]:text-primary-foreground group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-[3px] group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className,
      )}
      {...props}
    />
  );
</file>

<file path="src/components/ui/Card.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { Button } from "./button";
import {
  Card,
  CardAction,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "./card";
⋮----
type Story = StoryObj<typeof Card>;
</file>

<file path="src/components/ui/translated-form-message.tsx">
import { useTranslations } from "next-intl";
import { useFormField } from "@/components/ui/form";
import { cn } from "@/lib/utils";
⋮----
export function TranslatedFormMessage({
  className,
  ...props
}: React.ComponentProps<"p">)
⋮----
className=
</file>

<file path="src/hooks/useAuthenticatedFetch.test.ts">
import { renderHook } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
⋮----
import { useAuthenticatedFetch } from "./useAuthenticatedFetch";
</file>

<file path="src/hooks/useAuthenticatedFetch.ts">
import { useCallback } from "react";
import { auth } from "@/lib/firebase/client";
⋮----
interface FetchOptions extends Omit<RequestInit, "headers"> {
  headers?: Record<string, string>;
}
⋮----
interface UseAuthenticatedFetchReturn {
  getAuthToken: () => Promise<string | null>;
  authenticatedFetch: (
    url: string,
    options?: FetchOptions,
  ) => Promise<Response>;
}
⋮----
export function useAuthenticatedFetch(): UseAuthenticatedFetchReturn
</file>

<file path="src/hooks/useGameJoin.test.ts">
import { renderHook, waitFor } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { useGameJoin } from "./useGameJoin";
</file>

<file path="src/hooks/useGameJoin.ts">
import { useCallback, useState } from "react";
import { useAuthenticatedFetch } from "./useAuthenticatedFetch";
⋮----
interface GameJoinResult {
  success: boolean;
  data?: {
    participationId: string;
    alreadyParticipating?: boolean;
  };
  error?: {
    code: string;
    message: string;
    details?: string;
  };
}
⋮----
interface UseGameJoinReturn {




  joinGame: (gameId: string) => Promise<GameJoinResult>;



  isJoining: boolean;



  error: string | null;



  clearError: () => void;
}
⋮----
export function useGameJoin(): UseGameJoinReturn
</file>

<file path="src/hooks/useGameParticipation.test.ts">
import { renderHook, waitFor } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import type { User } from "@/types/schema";
import { useGameParticipation } from "./useGameParticipation";
</file>

<file path="src/hooks/useGameParticipation.ts">
import { useCallback, useEffect, useState } from "react";
import type { User } from "@/types/schema";
import { useAuthenticatedFetch } from "./useAuthenticatedFetch";
⋮----
interface UseGameParticipationReturn {






  isParticipating: boolean | null;



  isLoading: boolean;



  error: Error | null;



  refresh: () => Promise<void>;
}
⋮----
export function useGameParticipation(
  gameId: string,
  user: User | null,
): UseGameParticipationReturn
</file>

<file path="src/hooks/useParticipatingGames.test.ts">
import { renderHook, waitFor } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import type { User } from "@/types/schema";
import { useParticipatingGames } from "./useParticipatingGames";
⋮----
// No notes field when fetchDetails is false
⋮----
// Should only call game API, not participants API
</file>

<file path="src/i18n/request.ts">
import { getRequestConfig } from "next-intl/server";
import { getUserLocale } from "@/services/locale";
</file>

<file path="src/lib/firebase/admin.test.ts">
import { describe, expect, it } from "vitest";
import { adminAuth, adminFirestore } from "./admin";
</file>

<file path="src/services/game.ts">
import type { ApiResponse } from "@/types/common";
import type { Game, GameBoard } from "@/types/schema";
⋮----
export interface Participant {
  id: string;
  username: string;
}
⋮----
export async function getGameData(gameId: string): Promise<Game | null>
⋮----
export async function getGameBoard(gameId: string): Promise<GameBoard | null>
⋮----
export async function getParticipants(gameId: string): Promise<Participant[]>
</file>

<file path="src/services/locale.test.ts">
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { defaultLocale } from "@/i18n/config";
import { clearUserLocale, getUserLocale, setUserLocale } from "./locale";
</file>

<file path="src/services/locale.ts">
import { cookies } from "next/headers";
import { defaultLocale, type Locale } from "@/i18n/config";
⋮----
export async function getUserLocale()
⋮----
export async function setUserLocale(locale: Locale)
⋮----
export async function clearUserLocale()
</file>

<file path="src/test/helpers/firebase-test-helpers.ts">
import { Timestamp } from "firebase-admin/firestore";
import type { TimestampInterface } from "@/types/firestore";
import type { User } from "@/types/schema";
import type { UserDocument } from "@/types/user";
⋮----
export function dateToAdminTimestampForTest(
  date: Date | null | undefined,
): TimestampInterface | null
⋮----
export function userToFirestoreForTest(
  user: User,
  passwordHash = "",
): UserDocument
⋮----
// Create base document without optional fields
</file>

<file path="src/types/index.ts">

</file>

<file path="cors.json">
[
  {
    "origin": [
      "http://localhost:3000",
      "http://localhost:6006",
      "http://localhost:8080",
      "https://pingo-456817.web.app",
      "https://pingo-617969816285.asia-northeast1.run.app",
      "https://pingo-lziscmbaca-an.a.run.app"
    ],
    "method": ["GET", "HEAD", "PUT", "POST", "DELETE"],
    "responseHeader": [
      "Content-Type",
      "Access-Control-Allow-Origin",
      "x-goog-resumable"
    ],
    "maxAgeSeconds": 3600
  }
]
</file>

<file path="middleware.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
⋮----
export function middleware(request: NextRequest)
</file>

<file path="repomix.config.json">
{
  "$schema": "https://repomix.com/schemas/latest/schema.json",
  "input": {
    "maxFileSize": 52428800
  },
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "files": true,
    "removeComments": true,
    "removeEmptyLines": false,
    "compress": true,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100,
      "includeDiffs": false
    }
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>

<file path="vitest.browser.setup.ts">

</file>

<file path="vitest.config.mts">
import react from "@vitejs/plugin-react";
import tsconfigPaths from "vite-tsconfig-paths";
import { coverageConfigDefaults, defineConfig } from "vitest/config";
⋮----
envDir: ".", // Load .env files from root directory
⋮----
setupFiles: ["./vitest.setup.ts"], // Add setup file
testTimeout: 10000, // Increase timeout for Firebase operations
⋮----
setupFiles: ["./vitest.browser.setup.ts"], // Add browser setup file
⋮----
"next.config.ts", // Exclude Next.js config
"playwright.config.ts", // Exclude Playwright config
"postcss.config.mjs", // Exclude PostCSS config
"scripts/**/*.ts", // Exclude scripts
"src/components/ui/*.tsx", // Exclude shadcn/ui components
"src/components/magicui/*.tsx", // Exclude Magic UI components
"src/i18n/*.ts", // Exclude i18n config
"**/*.stories.{ts,tsx}", // Exclude Storybook stories
"**/stories/example/*.tsx", // Exclude example stories
</file>

<file path="src/app/api/auth/logout/route.test.ts">
import bcrypt from "bcrypt";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import { userToFirestoreForTest } from "@/test/helpers/firebase-test-helpers";
import type { ApiResponse } from "@/types/common";
⋮----
import type { User } from "@/types/schema";
⋮----
import { POST } from "./route";
</file>

<file path="src/app/api/game/public/route.ts">
import { NextResponse } from "next/server";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameParticipationService,
  AdminGameService,
  AdminUserService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import type { Game } from "@/types/schema";
⋮----
export async function GET(request: Request): Promise<
  NextResponse<
    ApiResponse<{
      games: Array<
        Partial<Game> & {
          isParticipating?: boolean;
          participantCount: number;
        }
      >;
    }>
  >
> {
  try {

    let userId: string | null = null;
    let userParticipatingGames: string[] = [];

    const authHeader = request.headers.get("Authorization");
</file>

<file path="src/app/api/health/route.ts">
import { NextResponse } from "next/server";
import { dateToISOString } from "@/types/firestore";
⋮----
export async function GET()
</file>

<file path="src/app/api/image/getUploadUrl/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import { getStorage } from "firebase-admin/storage";
import type { NextRequest } from "next/server";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { adminAuth } from "@/lib/firebase/admin";
import { POST } from "./route";
⋮----
const createMockRequest = (
    body: unknown,
    authHeader?: string,
): NextRequest =>
</file>

<file path="src/app/api/subjects/generate/route.test.ts">
import { beforeAll, describe, expect, it } from "vitest";
import { createApiRequest } from "@/test/helpers/api-test-helpers";
import { POST } from "./route";
</file>

<file path="src/app/game/[gameId]/components/ErrorDisplay.tsx">
import { cn } from "@/lib/utils";
⋮----
interface ErrorDisplayProps {
  error: string | null;
  className?: string;
}
⋮----
export function ErrorDisplay(
</file>

<file path="src/app/game/create/page.browser.test.tsx">
import { page, userEvent } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { afterAll, beforeEach, describe, expect, it, vi } from "vitest";
import { render } from "vitest-browser-react";
import { mockAuthGuard } from "@/test/helpers/auth-test-helpers";
import enMessages from "../../../../messages/en.json";
import jaMessages from "../../../../messages/ja.json";
⋮----
import CreateGamePage from "./page";
</file>

<file path="src/app/page.tsx">
import Link from "next/link";
import { useTranslations } from "next-intl";
import { useState } from "react";
⋮----
import { LoginForm } from "@/components/auth/LoginForm";
import { RegisterForm } from "@/components/auth/RegisterForm";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useAuth } from "@/contexts/AuthContext";
⋮----
const handleAuthSuccess = () =>
⋮----
const handleAuthError = (error: Error) =>
⋮----
<Link href="/game/create">
⋮----
<TabsTrigger value="login">
<TabsTrigger value="register">
⋮----
</file>

<file path="src/components/auth/AuthGuard.tsx">
import { useRouter } from "next/navigation";
import { type ReactNode, useEffect } from "react";
import Loading from "@/app/loading";
import { useAuth } from "@/contexts/AuthContext";
⋮----
interface AuthGuardProps {
  children: ReactNode;
  redirectTo?: string;
}
⋮----
export function AuthGuard(
</file>

<file path="src/components/game/SubmissionResult.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { SubmissionResult } from "./SubmissionResult";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/layout/Footer.tsx">
import Image from "next/image";
import Link from "next/link";
import { useTranslations } from "next-intl";
</file>

<file path="src/components/layout/Header.stories.tsx">
import { faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { AuthContext } from "@/contexts/AuthContext";
import { Header } from "./Header";
⋮----
type Story = StoryObj<typeof Header>;
</file>

<file path="src/components/layout/Header.tsx">
import Link from "next/link";
import { useTranslations } from "next-intl";
import type { ReactElement } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { LanguageSwitcher } from "./LanguageSwitcher";
import { NotificationIcon } from "./NotificationIcon";
import { UserMenu } from "./UserMenu";
⋮----
</file>

<file path="src/components/layout/LanguageSwitcher.tsx">
import { Languages } from "lucide-react";
import { useRouter } from "next/navigation";
import { useLocale, useTranslations } from "next-intl";
import { Button } from "@/components/ui/button";
import { setUserLocale } from "@/services/locale";
⋮----
export function LanguageSwitcher()
⋮----
const toggleLocale = async () =>
</file>

<file path="src/components/layout/NotificationDrawer.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { NotificationDrawer } from "./NotificationDrawer";
⋮----
type Story = StoryObj<typeof NotificationDrawer>;
</file>

<file path="src/components/layout/NotificationDrawer.tsx">
import { faker } from "@faker-js/faker";
import { useTranslations } from "next-intl";
import type { ReactElement } from "react";
import { Button } from "@/components/ui/button";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { NotificationDisplayType, NotificationType } from "@/types/common";
import type { Notification } from "@/types/schema";
⋮----
type NotificationDrawerProps = {
  open: boolean;
  onOpenChange: (open: boolean) => void;
};
⋮----
<DrawerTitle>
⋮----
</file>

<file path="src/components/ui/Button.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import {
  ArrowRight,
  Check,
  Download,
  LoaderCircle,
  Mail,
  Plus,
  Trash,
} from "lucide-react";
import { fn } from "storybook/test";
import { Button } from "@/components/ui/button";
⋮----
type Story = StoryObj<typeof Button>;
</file>

<file path="src/components/ui/button.tsx">
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
⋮----
import { cn } from "@/lib/utils";
</file>

<file path="src/components/ui/Calendar.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { Calendar } from "./calendar";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
render: () => <Calendar disabled=
</file>

<file path="src/components/ui/Form.stories.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "./button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./form";
import { Input } from "./input";
⋮----
type Story = StoryObj<typeof Form>;
⋮----
function onSubmit(values: z.infer<typeof basicFormSchema>)
⋮----
onSubmit=
⋮----
type ValidationFormData = z.infer<typeof validationFormSchema>;
⋮----
function onSubmit(values: ValidationFormData)
⋮----
type ComplexFormData = z.infer<typeof complexFormSchema>;
⋮----
function onSubmit(values: ComplexFormData)
</file>

<file path="src/components/ui/Input.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useId } from "react";
import { Input } from "./input";
⋮----
type Story = StoryObj<typeof Input>;
</file>

<file path="src/contexts/AuthContext.tsx">
import { signInWithCustomToken } from "firebase/auth";
import {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";
⋮----
import { auth } from "@/lib/firebase/client";
import type { User } from "@/types/schema";
⋮----
export interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: Error | null;
  login: (username: string, password: string) => Promise<void>;
  register: (
    username: string,
    password: string,
    isTestUser?: boolean,
  ) => Promise<void>;
  logout: () => Promise<void>;
  updateUser: (userData: Partial<User>) => Promise<void>;
}
⋮----
export function useAuth()
⋮----
export function AuthProvider(
</file>

<file path="src/hooks/useParticipatingGames.ts">
import { useEffect, useState } from "react";
import { auth } from "@/lib/firebase/client";
import type { GameInfo, User } from "@/types/schema";
⋮----
interface UseParticipatingGamesOptions {





  fetchDetails?: boolean;
}
⋮----
export function useParticipatingGames(
  user: User | null,
  options: UseParticipatingGamesOptions = {},
)
⋮----
const fetchParticipatingGames = async () =>
⋮----
// Fetch game information for each participating game
⋮----
// Always fetch basic game info
⋮----
// Check if game has not expired
⋮----
// Optionally fetch detailed information
⋮----
// Fetch participant count
⋮----
// Silently fail participant count fetch
⋮----
// Silently skip games that return 404 or other errors
</file>

<file path="src/lib/firebase/admin.ts">
import { cert, getApps, initializeApp } from "firebase-admin/app";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
</file>

<file path="src/test/helpers/api-test-helpers.ts">
import { NextRequest } from "next/server";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
⋮----
export const generateTestUsername = (prefix = TEST_PREFIX) =>
⋮----
export const createApiRequest = (
  path: string,
  method = "POST",
  body?: Record<string, unknown>,
  headers?: Record<string, string>,
) =>
⋮----
export const cleanupTestUsers = async (userIds: string[]) =>
</file>

<file path="src/test/helpers/auth-test-helpers.ts">
import { ulid } from "ulid";
import { vi } from "vitest";
import type { AuthContextType } from "@/contexts/AuthContext";
import type { User } from "@/types/schema";
⋮----
export function createMockUser(overrides: Partial<User> =
⋮----
export function mockAuthGuard()
⋮----
export function mockAuthenticatedUser(
  userOverrides: Partial<User> = {},
): AuthContextType
⋮----
export function mockUnauthenticatedUser(): AuthContextType
⋮----
export function mockLoadingAuthState(): AuthContextType
</file>

<file path="src/test/helpers/game-test-helpers.ts">
import { adminFirestore } from "@/lib/firebase/admin";
import { TEST_PREFIX } from "./api-test-helpers";
⋮----
export const generateTestGameTitle = (prefix = TEST_PREFIX) =>
⋮----
export const cleanupTestGames = async (gameIds: string[]) =>
⋮----
export const generateTestCells = () =>
</file>

<file path="src/types/firestore.ts">
import { Timestamp as ClientTimestamp } from "firebase/firestore";
import { Timestamp as AdminTimestamp } from "firebase-admin/firestore";
⋮----
export interface TimestampInterface {
  toDate(): Date;
  toMillis(): number;
  isEqual(other: TimestampInterface): boolean;
  valueOf(): string;
}
⋮----
toDate(): Date;
toMillis(): number;
isEqual(other: TimestampInterface): boolean;
valueOf(): string;
⋮----
export function isClientTimestamp(
  timestamp: unknown,
): timestamp is ClientTimestamp
⋮----
export function isAdminTimestamp(
  timestamp: unknown,
): timestamp is AdminTimestamp
⋮----
export function isTimestamp(
  timestamp: unknown,
): timestamp is TimestampInterface
⋮----
export function timestampToDate(
  timestamp: TimestampInterface | null | undefined,
): Date | null
⋮----
export function dateToClientTimestamp(
  date: Date | null | undefined,
): ClientTimestamp | null
⋮----
export function dateToAdminTimestamp(
  date: Date | null | undefined,
): AdminTimestamp | null
⋮----
export function dateToTimestamp(
  date: Date | null | undefined,
): TimestampInterface | null
⋮----
export function nonNullDateToTimestamp(date: Date): TimestampInterface
⋮----
export function timestampToISOString(
  timestamp: TimestampInterface | null | undefined,
): string | null
⋮----
export function dateToISOString(date: Date | null | undefined): string | null
⋮----
export interface BaseDocument {
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
}
⋮----
export interface BaseModel {
  createdAt: Date;
  updatedAt?: Date | null;
}
⋮----
export function convertTimestampsToDate<T extends Record<string, unknown>>(
  data: T,
): T
</file>

<file path=".mcp.json">
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"]
    },
    "serena": {
      "type": "stdio",
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena",
        "start-mcp-server",
        "--context",
        "ide-assistant",
        "--project",
        "/Users/suzuki/Workspace/github.com/shin-sforzando/pingo"
      ],
      "env": {}
    }
  }
}
</file>

<file path="cloudbuild.yaml">
steps:

  - name: gcr.io/cloud-builders/docker
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker build \
          --no-cache \
          -t $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA \
          . \
          -f Dockerfile \
          --build-arg FIREBASE_PROJECT_ID="$$FIREBASE_PROJECT_ID" \
          --build-arg FIREBASE_CLIENT_EMAIL="$$FIREBASE_CLIENT_EMAIL" \
          --build-arg FIREBASE_PRIVATE_KEY="$$FIREBASE_PRIVATE_KEY" \
          --build-arg GEMINI_API_KEY="$$GEMINI_API_KEY" \
          --build-arg GOOGLE_CLOUD_STORAGE_BUCKET="pingo-456817-images"
    secretEnv:
      [
        "FIREBASE_PROJECT_ID",
        "FIREBASE_CLIENT_EMAIL",
        "FIREBASE_PRIVATE_KEY",
        "GEMINI_API_KEY",
      ]
    id: Build

  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - >-
        $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    id: Push

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    args:
      - run
      - services
      - update
      - $_SERVICE_NAME
      - "--platform=managed"
      - >-
        --image=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
      - >-
        --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID
      - "--region=$_DEPLOY_REGION"
      - "--quiet"
    id: Deploy
    entrypoint: gcloud

images:
  - >-
    $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA

options:
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _AR_PROJECT_ID: pingo-456817
  _PLATFORM: managed
  _SERVICE_NAME: pingo
  _TRIGGER_ID: ffafef4b-1470-4a85-9178-2f0b0adea3eb
  _DEPLOY_REGION: asia-northeast1
  _AR_HOSTNAME: asia-northeast1-docker.pkg.dev
  _AR_REPOSITORY: cloud-run-source-deploy

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - pingo

availableSecrets:
  secretManager:
    - versionName: projects/pingo-456817/secrets/FIREBASE_PROJECT_ID/versions/latest
      env: "FIREBASE_PROJECT_ID"
    - versionName: projects/pingo-456817/secrets/FIREBASE_CLIENT_EMAIL/versions/latest
      env: "FIREBASE_CLIENT_EMAIL"
    - versionName: projects/pingo-456817/secrets/FIREBASE_PRIVATE_KEY/versions/latest
      env: "FIREBASE_PRIVATE_KEY"
    - versionName: projects/pingo-456817/secrets/GEMINI_API_KEY/versions/latest
      env: "GEMINI_API_KEY"
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";
</file>

<file path="tsconfig.build.json">
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "**/*.test.tsx", "**/*.stories.tsx"]
}
</file>

<file path="src/app/api/auth/login/route.test.ts">
import bcrypt from "bcrypt";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import { userToFirestoreForTest } from "@/test/helpers/firebase-test-helpers";
import type { ApiResponse } from "@/types/common";
⋮----
import type { User } from "@/types/schema";
⋮----
import { POST } from "./route";
</file>

<file path="src/app/api/auth/logout/route.ts">
import { type NextRequest, NextResponse } from "next/server";
⋮----
import { AdminUserService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
⋮----
export async function POST(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="src/app/api/auth/me/route.ts">
import { type NextRequest, NextResponse } from "next/server";
⋮----
import { adminAuth } from "@/lib/firebase/admin";
import { AdminUserService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import type { User } from "@/types/schema";
⋮----
export async function GET(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="src/app/api/auth/register/route.test.ts">
import type { NextResponse } from "next/server";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import { userToFirestoreForTest } from "@/test/helpers/firebase-test-helpers";
import type { ApiResponse } from "@/types/common";
import type { User } from "@/types/schema";
⋮----
import { POST } from "./route";
</file>

<file path="src/app/api/auth/update/route.test.ts">
import bcrypt from "bcrypt";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import { userToFirestoreForTest } from "@/test/helpers/firebase-test-helpers";
import type { ApiResponse } from "@/types/common";
⋮----
import type { User } from "@/types/schema";
⋮----
import { PUT } from "./route";
</file>

<file path="src/app/api/game/[gameId]/board/route.ts">
import { NextResponse } from "next/server";
import { AdminGameBoardService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import type { GameBoard } from "@/types/schema";
⋮----
export async function GET(
  _request: Request,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<GameBoard>>>
</file>

<file path="src/app/api/game/[gameId]/events/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
import { GameStatus, Role } from "@/types/common";
import type { Event } from "@/types/schema";
import { GET, POST } from "./route";
</file>

<file path="src/app/api/game/[gameId]/submission/[submissionId]/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
import {
  AcceptanceStatus,
  GameStatus,
  ProcessingStatus,
  Role,
} from "@/types/common";
import { submissionToFirestore } from "@/types/game";
import type { Submission } from "@/types/schema";
import { GET, PUT } from "./route";
</file>

<file path="src/app/api/game/[gameId]/submission/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameParticipationService,
  AdminGameService,
  AdminSubmissionService,
} from "@/lib/firebase/admin-collections";
import {
  cleanupTestUsers,
  createApiRequest,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
import { GameStatus, ProcessingStatus } from "@/types/common";
import type { Game, Submission } from "@/types/schema";
import { GET, POST } from "./route";
</file>

<file path="src/app/api/game/create/route.test.ts">
import type { NextResponse } from "next/server";
import { afterAll, beforeAll, describe, expect, it, vi } from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestCells,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
⋮----
import { POST } from "./route";
</file>

<file path="src/app/api/subjects/check/route.test.ts">
import { beforeAll, describe, expect, it } from "vitest";
import { createApiRequest } from "@/test/helpers/api-test-helpers";
import { POST as generatePOST } from "../generate/route";
import { POST } from "./route";
⋮----
interface CheckIssue {
  subject: string;
  reason: string;
}
</file>

<file path="src/app/api/subjects/check/route.ts">
import { GoogleGenAI, Type } from "@google/genai";
import { type NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import type { Locale } from "@/i18n/config";
import { getUserLocale } from "@/services/locale";
⋮----
type CheckSubjectsRequest = z.infer<typeof checkSubjectsSchema>;
⋮----
interface CheckIssue {
  subject: string;
  reason: string;
}
⋮----
interface CheckResponse {
  ok: boolean;
  issues?: CheckIssue[];
}
⋮----
const getPromptTemplate = (params: CheckSubjectsRequest) =>
⋮----
export async function POST(request: NextRequest)
</file>

<file path="src/app/game/[gameId]/components/GameHeader.tsx">
import { useTranslations } from "next-intl";
import { Card, CardHeader, CardTitle } from "@/components/ui/card";
import type { Game } from "@/types/schema";
⋮----
interface GameHeaderProps {
  game: Game | null;
  className?: string;
}
</file>

<file path="src/app/game/[gameId]/share/page.stories.tsx">
import { fakerJA as faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { GameStatus } from "@/types/common";
import type { Cell, Game } from "@/types/schema";
import SharePage from "./page";
⋮----
const generateSampleCells = (): Cell[] =>
⋮----
const mockUseParams = () => (
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/game/BingoBoard.stories.tsx">
import { fakerJA as faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import type { Cell } from "@/types/schema";
import { BingoBoard } from "./BingoBoard";
import type { BingoCellState } from "./BingoCell";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
const generateSampleCells = (): Cell[] =>
⋮----
const generateSampleCellStates = (
  pattern: "none" | "random" | "row" | "column" | "diagonal" | "all",
): Record<string, BingoCellState> =>
⋮----
const generateCompletedLines = (
  pattern: "none" | "row" | "column" | "diagonal" | "multiple",
): number[][] =>
</file>

<file path="src/components/game/GameInfo.tsx">
import {
  Calendar,
  Camera,
  Eye,
  EyeOff,
  Globe,
  Lock,
  Target,
  TrendingUp,
} from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { formatDate } from "@/lib/utils";
import { GameStatus } from "@/types/common";
import type { Game } from "@/types/schema";
⋮----
export interface GameInfoProps {



  game: Game;



  className?: string;
}
⋮----
const getStatusConfig = () =>
</file>

<file path="src/components/game/ImageUpload.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { fn } from "storybook/test";
import { ImageUpload } from "./ImageUpload";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/game/SubmissionResult.browser.test.tsx">
import { page } from "@vitest/browser/context";
import { NextIntlClientProvider } from "next-intl";
import { describe, expect, it } from "vitest";
import { render } from "vitest-browser-react";
import { AcceptanceStatus } from "@/types/common";
import enMessages from "../../../messages/en.json";
import jaMessages from "../../../messages/ja.json";
import { SubmissionResult } from "./SubmissionResult";
⋮----
const renderWithIntl = (component: React.ReactElement, locale: "en" | "ja") =>
</file>

<file path="src/components/layout/UserMenu.stories.tsx">
import { faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { AuthContext } from "@/contexts/AuthContext";
import { UserMenu } from "./UserMenu";
⋮----
const mockFetchForParticipatingGames = (_gameIds: string[]) =>
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/components/magicui/Confetti.stories.tsx">
import type { Meta, StoryObj } from "@storybook/nextjs";
import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { Confetti, type ConfettiRef } from "./confetti";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
const handleBasicConfetti = () =>
⋮----
const handleFireworksConfetti = () =>
⋮----
const randomInRange = (min: number, max: number)
⋮----
const confettiRef = useRef<ConfettiRef>(null);
</file>

<file path="src/components/magicui/confetti.tsx">
import type {
  GlobalOptions as ConfettiGlobalOptions,
  CreateTypes as ConfettiInstance,
  Options as ConfettiOptions,
} from "canvas-confetti";
import confetti from "canvas-confetti";
import type React from "react";
import type { ReactNode } from "react";
import {
  createContext,
  forwardRef,
  useCallback,
  useEffect,
  useImperativeHandle,
  useMemo,
  useRef,
} from "react";
⋮----
import { Button } from "@/components/ui/button";
⋮----
type Api = {
  fire: (options?: ConfettiOptions) => void;
};
⋮----
type Props = React.ComponentPropsWithRef<"canvas"> & {
  options?: ConfettiOptions;
  globalOptions?: ConfettiGlobalOptions;
  manualstart?: boolean;
  children?: ReactNode;
};
⋮----
export type ConfettiRef = Api | null;
⋮----
interface ConfettiButtonProps extends React.ComponentProps<typeof Button> {
  options?: ConfettiOptions &
    ConfettiGlobalOptions & { canvas?: HTMLCanvasElement };
  children?: React.ReactNode;
}
⋮----
const ConfettiButtonComponent = ({
  options,
  children,
  ...props
}: ConfettiButtonProps) =>
⋮----
const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) =>
</file>

<file path="src/types/game.ts">
import type {
  AcceptanceStatus,
  GameStatus,
  LineType,
  ProcessingStatus,
  Role,
} from "./common";
import type { TimestampInterface } from "./firestore";
import { dateToTimestamp, timestampToDate } from "./firestore";
import type {
  Cell,
  CellState,
  CompletedLine,
  Event,
  Game,
  GameBoard,
  GameParticipation,
  PlayerBoard,
  Submission,
} from "./schema";
⋮----
export interface GameDocument {
  id: string;
  title: string;
  theme: string;
  creatorId: string;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
  expiresAt: TimestampInterface;
  isPublic: boolean;
  isPhotoSharingEnabled: boolean;
  requiredBingoLines: number;
  confidenceThreshold: number;
  maxSubmissionsPerUser: number;
  notes?: string;
  status: GameStatus;
}
⋮----
export interface GameBoardDocument {
  cells: CellDocument[];
}
⋮----
export interface CellDocument {
  id: string;
  position: {
    x: number;
    y: number;
  };
  subject: string;
  isFree: boolean;
}
⋮----
export interface PlayerBoardDocument {
  userId: string;
  cellStates: Record<string, CellStateDocument>;
  completedLines: CompletedLineDocument[];
}
⋮----
export interface CellStateDocument {
  isOpen: boolean;
  openedAt: TimestampInterface | null;
  openedBySubmissionId: string | null;
}
⋮----
export interface CompletedLineDocument {
  type: LineType;
  index: number;
  completedAt: TimestampInterface;
}
⋮----
export interface GameParticipationDocument {
  userId: string;
  gameId: string;
  role: Role;
  joinedAt: TimestampInterface;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
  completedLines?: number;
  lastCompletedAt?: TimestampInterface | null;
  submissionCount?: number;
}
⋮----
export interface SubmissionDocument {
  id: string;
  userId: string;
  imageUrl: string;
  submittedAt: TimestampInterface;
  analyzedAt: TimestampInterface | null;
  critique: string | null;
  matchedCellId: string | null;
  confidence: number | null;
  processingStatus: ProcessingStatus;
  acceptanceStatus: AcceptanceStatus | null;
  errorMessage: string | null;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
  memo?: string;
}
⋮----
export interface EventDocument {
  id: string;
  type: string;
  userId: string;
  timestamp: TimestampInterface;
  details?: Record<string, unknown>;
  createdAt: TimestampInterface;
  updatedAt?: TimestampInterface | null;
}
⋮----
export function gameFromFirestore(doc: GameDocument): Game
⋮----
export function gameToFirestore(game: Game): GameDocument
⋮----
export function gameBoardFromFirestore(doc: GameBoardDocument): GameBoard
⋮----
export function gameBoardToFirestore(board: GameBoard): GameBoardDocument
⋮----
export function cellFromFirestore(doc: CellDocument): Cell
⋮----
export function cellToFirestore(cell: Cell): CellDocument
⋮----
export function playerBoardFromFirestore(
  doc: PlayerBoardDocument,
): PlayerBoard
⋮----
export function playerBoardToFirestore(
  board: PlayerBoard,
): PlayerBoardDocument
⋮----
export function cellStateFromFirestore(doc: CellStateDocument): CellState
⋮----
export function cellStateToFirestore(state: CellState): CellStateDocument
⋮----
export function completedLineFromFirestore(
  doc: CompletedLineDocument,
): CompletedLine
⋮----
export function completedLineToFirestore(
  line: CompletedLine,
): CompletedLineDocument
⋮----
export function gameParticipationFromFirestore(
  doc: GameParticipationDocument,
): GameParticipation
⋮----
export function gameParticipationToFirestore(
  participation: GameParticipation,
): GameParticipationDocument
⋮----
export function submissionFromFirestore(doc: SubmissionDocument): Submission
⋮----
export function submissionToFirestore(
  submission: Submission,
): SubmissionDocument
⋮----
export function eventFromFirestore(doc: EventDocument): Event
⋮----
export function eventToFirestore(event: Event): EventDocument
</file>

<file path="src/app/api/auth/me/route.test.ts">
import bcrypt from "bcrypt";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
  generateTestUsername,
} from "@/test/helpers/api-test-helpers";
import { userToFirestoreForTest } from "@/test/helpers/firebase-test-helpers";
import type { ApiResponse } from "@/types/common";
⋮----
import type { User } from "@/types/schema";
⋮----
import { GET } from "./route";
</file>

<file path="src/app/api/auth/update/route.ts">
import bcrypt from "bcrypt";
import { type NextRequest, NextResponse } from "next/server";
import { z } from "zod";
⋮----
import { AdminUserService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { type User, userCreationSchema, userSchema } from "@/types/schema";
⋮----
export async function PUT(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="src/app/api/game/[gameId]/participants/route.ts">
import { NextResponse } from "next/server";
import { AdminGameParticipationService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
⋮----
export async function GET(
  _request: Request,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<
  NextResponse<
    ApiResponse<
      Array<{
        id: string;
        username: string;
        completedLines: number;
        submissionCount: number;
      }>
    >
  >
> {
  try {
    const { gameId } = await params;

if (!gameId)
</file>

<file path="src/app/api/game/[gameId]/playerBoard/[userId]/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
import { GameStatus, LineType, Role } from "@/types/common";
import { playerBoardToFirestore } from "@/types/game";
import type { PlayerBoard } from "@/types/schema";
import { GET, PUT } from "./route";
</file>

<file path="src/app/api/game/[gameId]/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextResponse } from "next/server";
import { ulid } from "ulid";
import {
  afterAll,
  afterEach,
  beforeEach,
  describe,
  expect,
  it,
  vi,
} from "vitest";
import { adminAuth, adminFirestore } from "@/lib/firebase/admin";
import {
  cleanupTestUsers,
  createApiRequest,
} from "@/test/helpers/api-test-helpers";
import {
  cleanupTestGames,
  generateTestGameTitle,
} from "@/test/helpers/game-test-helpers";
import type { ApiResponse } from "@/types/common";
import { GameStatus, Role } from "@/types/common";
import { gameToFirestore } from "@/types/game";
import type { Game } from "@/types/schema";
import { PUT } from "./route";
</file>

<file path="src/app/api/image/upload/route.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import { getStorage } from "firebase-admin/storage";
import { type NextRequest, NextResponse } from "next/server";
import { ulid } from "ulid";
import { adminAuth } from "@/lib/firebase/admin";
⋮----
export async function POST(request: NextRequest)
</file>

<file path="src/app/api/subjects/generate/route.ts">
import { GoogleGenAI, Type } from "@google/genai";
import { type NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import type { Locale } from "@/i18n/config";
import { getUserLocale } from "@/services/locale";
⋮----
type GenerateSubjectsRequest = z.infer<typeof generateSubjectsSchema>;
⋮----
const getPromptTemplate = (params: GenerateSubjectsRequest) =>
⋮----
export async function POST(request: NextRequest)
</file>

<file path="src/app/game/[gameId]/hooks/useImageSubmission.ts">
import { useCallback, useEffect, useRef, useState } from "react";
import type { ConfettiRef } from "@/components/magicui/confetti";
import type { ImageSubmissionResult } from "@/types/schema";
⋮----
type UploadCompleteHandler = (
  success: boolean,
  result?: ImageSubmissionResult,
  error?: string,
) => void;
⋮----
interface UseImageSubmissionProps {
  refreshParticipants: () => Promise<void>;
  refreshSubmissions: () => Promise<void>;
  setIsUploading: (isUploading: boolean) => void;
  confettiRef?: React.RefObject<ConfettiRef>;
}
⋮----
export function useImageSubmission({
  refreshParticipants,
  refreshSubmissions,
  setIsUploading,
  confettiRef,
}: UseImageSubmissionProps)
⋮----
const randomInRange = (min: number, max: number)
</file>

<file path="src/components/game/ParticipantsList.stories.tsx">
import { faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { Role } from "@/types/common";
import { ParticipantsList } from "./ParticipantsList";
⋮----
type Story = StoryObj<typeof meta>;
⋮----
const generateParticipant = (role: Role, completedLines = 0) => (
</file>

<file path="src/app/api/auth/login/route.ts">
import bcrypt from "bcrypt";
import { type NextRequest, NextResponse } from "next/server";
⋮----
import { adminAuth } from "@/lib/firebase/admin";
import { AdminUserService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import type { User } from "@/types/schema";
import { userLoginSchema } from "@/types/schema";
⋮----
export async function POST(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="src/app/api/auth/register/route.ts">
import bcrypt from "bcrypt";
import { type NextRequest, NextResponse } from "next/server";
import { ulid } from "ulid";
⋮----
import { adminAuth } from "@/lib/firebase/admin";
import { AdminUserService } from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import type { User } from "@/types/schema";
import { userCreationSchema } from "@/types/schema";
⋮----
export async function POST(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="src/app/api/game/[gameId]/join/route.test.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import { NextRequest } from "next/server";
import { beforeEach, describe, expect, it, vi } from "vitest";
import type { Game, User } from "@/types/schema";
import { POST } from "./route";
⋮----
type MockUser = Pick<
  User,
  | "id"
  | "username"
  | "participatingGames"
  | "createdAt"
  | "lastLoginAt"
  | "gameHistory"
  | "isTestUser"
> &
  Partial<
    Omit<
      User,
      | "id"
      | "username"
      | "participatingGames"
      | "createdAt"
      | "lastLoginAt"
      | "gameHistory"
      | "isTestUser"
    >
  >;
type MockGame = Pick<
  Game,
  | "id"
  | "title"
  | "theme"
  | "creatorId"
  | "expiresAt"
  | "isPublic"
  | "isPhotoSharingEnabled"
  | "requiredBingoLines"
  | "confidenceThreshold"
  | "maxSubmissionsPerUser"
  | "status"
  | "createdAt"
> &
  Partial<
    Omit<
      Game,
      | "id"
      | "title"
      | "theme"
      | "creatorId"
      | "expiresAt"
      | "isPublic"
      | "isPhotoSharingEnabled"
      | "requiredBingoLines"
      | "confidenceThreshold"
      | "maxSubmissionsPerUser"
      | "status"
      | "createdAt"
    >
  >;
</file>

<file path="src/app/api/game/[gameId]/join/route.ts">
import { getFirestore } from "firebase-admin/firestore";
import { NextResponse } from "next/server";
import { ulid } from "ulid";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameService,
  AdminTransactionService,
  AdminUserService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
⋮----
export async function POST(
  request: Request,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<
⋮----
// Map specific transaction errors to appropriate response codes
</file>

<file path="src/app/api/game/[gameId]/submission/analyze/route.ts">
import { GoogleGenAI, Type } from "@google/genai";
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { z } from "zod";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameBoardService,
  AdminGameParticipationService,
  AdminGameService,
  AdminPlayerBoardService,
  AdminSubmissionService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { AcceptanceStatus, ProcessingStatus } from "@/types/common";
import type { AnalysisResult, Cell } from "@/types/schema";
import { analysisResultSchema } from "@/types/schema";
⋮----
async function authenticateUser(
  request: NextRequest,
): Promise<string | NextResponse<ApiResponse<never>>>
⋮----
async function verifyGameParticipant(
  gameId: string,
  userId: string,
): Promise<NextResponse<ApiResponse<never>> | null>
⋮----
async function getAvailableCells(
  gameId: string,
  userId: string,
): Promise<Cell[]>
⋮----
function getAnalysisPrompt(availableCells: Cell[], gameTheme: string): string
⋮----
async function fetchImageAsBase64(imageUrl: string): Promise<string>
⋮----
async function updateCellState(
  gameId: string,
  userId: string,
  cellId: string,
  submissionId: string,
): Promise<void>
⋮----
async function updateSubmissionAnalysis(
  gameId: string,
  submissionId: string,
  analysis: AnalysisResult,
): Promise<void>
⋮----
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<AnalysisResult>>>
</file>

<file path="src/app/game/[gameId]/hooks/useGameData.ts">
import { useCallback, useEffect, useState } from "react";
import type { Participant } from "@/components/game/ParticipantsList";
import { useAuth } from "@/contexts/AuthContext";
import { useAuthenticatedFetch } from "@/hooks/useAuthenticatedFetch";
import type { Cell, Game, PlayerBoard, Submission } from "@/types/schema";
⋮----
interface GameDataState {
  game: Game | null;
  gameBoard: Cell[] | null;
  playerBoard: PlayerBoard | null;
  participants: Participant[];
  submissions: Submission[];
  isLoading: boolean;
  error: string | null;
  isUploading: boolean;
}
⋮----
export function useGameData(gameId: string)
⋮----
const setupRealtimeListener = async () =>
</file>

<file path="src/app/game/[gameId]/share/page.tsx">
import {
  ActivityIcon,
  CalendarIcon,
  PercentIcon,
  PlayIcon,
  TableIcon,
} from "lucide-react";
import { useParams, useRouter } from "next/navigation";
import { useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { BingoBoard } from "@/components/game/BingoBoard";
import { InfoCard } from "@/components/game/InfoCard";
import { QRCodeCard } from "@/components/game/QRCodeCard";
import { HyperText } from "@/components/magicui/hyper-text";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/contexts/AuthContext";
import { useGameJoin } from "@/hooks/useGameJoin";
import { useGameParticipation } from "@/hooks/useGameParticipation";
import { BASE_URL } from "@/lib/constants";
import { formatDate } from "@/lib/utils";
import { GameStatus } from "@/types/common";
import type { Game, GameBoard } from "@/types/schema";
⋮----
async function fetchData()
⋮----
const handleJoinClick = async () =>
⋮----
title=
value=
</file>

<file path="src/app/game/create/page.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useTranslations } from "next-intl";
import { useId, useState } from "react";
import { type Resolver, type SubmitHandler, useForm } from "react-hook-form";
import { AuthGuard } from "@/components/auth/AuthGuard";
import { BingoBoard } from "@/components/game/BingoBoard";
import { type Subject, SubjectList } from "@/components/game/SubjectList";
import { ShineBorder } from "@/components/magicui/shine-border";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { TranslatedFormMessage } from "@/components/ui/translated-form-message";
import { auth } from "@/lib/firebase/client";
import { cn } from "@/lib/utils";
import type { Cell, GameCreationData } from "@/types/schema";
import { gameCreationSchema } from "@/types/schema";
⋮----
type GameCreateFormValues = GameCreationData;
⋮----
// Watch title and theme values for button enabling/disabling
⋮----
const generateSubjects = async () =>
⋮----
const updateCells = (subjectList: Subject[]) =>
⋮----
/**
   * Handle subjects change from SubjectList component
   */
const handleSubjectsChange = (newSubjects: Subject[]) =>
⋮----
// State for form submission
⋮----
/**
   * Handle form submission
   */
const onSubmit: SubmitHandler<GameCreateFormValues> = async (data) =>
⋮----
<form onSubmit=
⋮----
<CardTitle>
⋮----
disabled=
</file>

<file path="src/components/game/GameInfo.stories.tsx">
import { faker } from "@faker-js/faker";
import type { Meta, StoryObj } from "@storybook/nextjs";
import { GAME_ID_LENGTH } from "@/lib/constants";
import { GameStatus } from "@/types/common";
import type { Game } from "@/types/schema";
import { GameInfo } from "./GameInfo";
⋮----
type Story = StoryObj<typeof meta>;
</file>

<file path="src/lib/image-utils.test.ts">
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import {
  createImagePreviewUrl,
  DEFAULT_IMAGE_OPTIONS,
  isValidFileSize,
  isValidImageFile,
  MAX_FILE_SIZE,
  processImage,
  revokeImagePreviewUrl,
  SUPPORTED_IMAGE_TYPES,
} from "./image-utils";
⋮----
// Mock document.createElement
</file>

<file path="src/lib/image-utils.ts">
import type { ImageProcessingOptions, ProcessedImage } from "@/types/schema";
⋮----
async function getHeic2any()
⋮----
function getFileExtension(filename: string): string
⋮----
function isHeicFile(file: File): boolean
⋮----
async function convertHeicToJpeg(file: File): Promise<File>
⋮----
export function isValidImageFile(file: File): boolean
⋮----
export function isValidFileSize(file: File): boolean
⋮----
function createImageFromFile(file: File): Promise<HTMLImageElement>
⋮----
function calculateNewDimensions(
  originalWidth: number,
  originalHeight: number,
  maxLongSide: number,
):
⋮----
export async function processImage(
  file: File,
  options: ImageProcessingOptions = DEFAULT_IMAGE_OPTIONS,
): Promise<ProcessedImage>
⋮----
export function createImagePreviewUrl(file: File): string
⋮----
export function revokeImagePreviewUrl(url: string): void
</file>

<file path="src/services/image-upload.ts">
import type {
  ImageSubmissionData,
  ImageSubmissionResult,
  ProcessedImage,
} from "@/types/schema";
⋮----
export async function submitImage(
  processedImage: ProcessedImage,
  submissionData: ImageSubmissionData,
  authToken: string,
): Promise<ImageSubmissionResult>
</file>

<file path="Dockerfile">
# ---------------- Build Stage ----------------
FROM node:lts-slim AS base

# Define build arguments
ARG FIREBASE_PROJECT_ID
ARG FIREBASE_CLIENT_EMAIL
ARG FIREBASE_PRIVATE_KEY
ARG GEMINI_API_KEY
ARG GOOGLE_CLOUD_STORAGE_BUCKET="pingo-456817-images"

# Set non-public environment variables
ENV FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
ENV FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
ENV FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
ENV GEMINI_API_KEY=${GEMINI_API_KEY}

# Set publishable environment variables
ENV GOOGLE_CLOUD_STORAGE_BUCKET=${GOOGLE_CLOUD_STORAGE_BUCKET}
ENV NEXT_PUBLIC_BASE_URL="http://localhost:8080"
ENV NEXT_PUBLIC_FIREBASE_PROJECT_ID="pingo-456817"
ENV NEXT_PUBLIC_FIREBASE_API_KEY="AIzaSyCYXPVHEMWgIXpDc2j-qFuvzD79eI24dws"
ENV NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="pingo-456817.firebaseapp.com"
ENV NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="pingo-456817.firebasestorage.app"
ENV NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="617969816285"
ENV NEXT_PUBLIC_FIREBASE_APP_ID="1:617969816285:web:09a7ffe5ea531b45648134"


# Set the working directory in the container
WORKDIR /app

# Install necessary dependencies for Next.js standalone output
# (This step might be adjusted based on actual standalone output needs)
# RUN apt-get update && apt-get install -y --no-install-recommends openssl

# Copy package.json and package-lock.json (or yarn.lock or pnpm-lock.yaml)
COPY package*.json ./

# Install dependencies
# Use --frozen-lockfile to ensure reproducibility
RUN npm ci

# Copy the rest of the application code
# Use .dockerignore to exclude unnecessary files
COPY . .

# Build the Next.js application
# This will generate the .next directory with the production build
RUN npm run build


# ---------------- Production Stage ----------------
FROM node:lts-slim AS production

# Define build arguments for Firebase credentials in production stage
ARG FIREBASE_PROJECT_ID
ARG FIREBASE_CLIENT_EMAIL
ARG FIREBASE_PRIVATE_KEY
ARG GEMINI_API_KEY
ARG GOOGLE_CLOUD_STORAGE_BUCKET="pingo-456817-images"

ENV NODE_ENV=production

# Next.js server runs on port 3000 by default, Cloud Run expects PORT env var
ENV PORT=8080

# Set non-public credentials for production stage
ENV FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
ENV FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
ENV FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
ENV GEMINI_API_KEY=${GEMINI_API_KEY}

# Set publishable environment variables for production stage
ENV GOOGLE_CLOUD_STORAGE_BUCKET=${GOOGLE_CLOUD_STORAGE_BUCKET}
ENV NEXT_PUBLIC_BASE_URL=http://localhost:8080
ENV NEXT_PUBLIC_FIREBASE_PROJECT_ID="pingo-456817"
ENV NEXT_PUBLIC_FIREBASE_API_KEY="AIzaSyCYXPVHEMWgIXpDc2j-qFuvzD79eI24dws"
ENV NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="pingo-456817.firebaseapp.com"
ENV NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="pingo-456817.firebasestorage.app"
ENV NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="617969816285"
ENV NEXT_PUBLIC_FIREBASE_APP_ID="1:617969816285:web:09a7ffe5ea531b45648134"

# Set the working directory in the container
WORKDIR /app

COPY --from=base /app/next.config.ts ./
COPY --from=base /app/messages ./messages
COPY --from=base /app/public ./public
COPY --from=base /app/.next/standalone ./
COPY --from=base /app/.next/static ./.next/static

# Expose the port the app runs on (defined by PORT env var)
EXPOSE 8080

# Command to run the application
# Uses the Node.js server included in the standalone output
CMD ["node", "server.js"]
</file>

<file path="src/app/api/game/[gameId]/events/route.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { ulid } from "ulid";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminEventService,
  AdminGameParticipationService,
  AdminGameService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { type Event, eventSchema } from "@/types/schema";
⋮----
async function authenticateUser(
  request: NextRequest,
): Promise<string | NextResponse<ApiResponse<never>>>
⋮----
async function verifyGameParticipant(
  gameId: string,
  userId: string,
): Promise<NextResponse<ApiResponse<never>> | null>
⋮----
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<Event[]>>>
⋮----
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<Event>>>
</file>

<file path="src/app/api/game/[gameId]/playerBoard/[userId]/route.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { z } from "zod";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameParticipationService,
  AdminGameService,
  AdminPlayerBoardService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import {
  cellStateApiSchema,
  completedLineApiSchema,
  type PlayerBoard,
} from "@/types/schema";
⋮----
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string; userId: string }> },
): Promise<NextResponse<ApiResponse<PlayerBoard>>>
⋮----
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string; userId: string }> },
): Promise<NextResponse<ApiResponse<PlayerBoard>>>
</file>

<file path="src/app/api/game/[gameId]/route.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { z } from "zod";
import { validateGameId } from "@/lib/api-utils";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameParticipationService,
  AdminGameService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { dateToISOString } from "@/types/firestore";
import type { Game } from "@/types/schema";
import { gameSchema } from "@/types/schema";
⋮----
export async function GET(
  request: Request,
  { params }: { params: Promise<{ gameId: string }> },
)
⋮----
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<Game>>>
</file>

<file path="src/app/api/image/check/route.test.ts">
import { faker } from "@faker-js/faker";
import type { DecodedIdToken } from "firebase-admin/auth";
import type { NextRequest } from "next/server";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameBoardService,
  AdminGameService,
  AdminPlayerBoardService,
  AdminSubmissionService,
  AdminTransactionService,
} from "@/lib/firebase/admin-collections";
import { GameStatus } from "@/types/common";
import { POST } from "./route";
⋮----
const createMockRequest = (
    body: unknown,
    authHeader?: string,
): NextRequest =>
</file>

<file path="src/app/api/image/getUploadUrl/route.ts">
import type { DecodedIdToken } from "firebase-admin/auth";
import { getStorage } from "firebase-admin/storage";
import { type NextRequest, NextResponse } from "next/server";
import { ulid } from "ulid";
import { z } from "zod";
import { adminAuth } from "@/lib/firebase/admin";
import { dateToISOString } from "@/types/firestore";
import { imageSubmissionDataSchema } from "@/types/schema";
⋮----
export async function POST(request: NextRequest)
</file>

<file path="src/app/debug/image-upload/page.tsx">
import { useState } from "react";
import { ImageUpload } from "@/components/game/ImageUpload";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import type { ImageSubmissionResult, ProcessedImage } from "@/types/schema";
⋮----
export default function ImageUploadDebugPage()
⋮----
const handleUploadStart = () =>
⋮----
const handleUploadComplete = (
    success: boolean,
    result?: ImageSubmissionResult,
    error?: string,
) =>
⋮----
const handleImageProcessed = (processedImage: ProcessedImage) =>
</file>

<file path="src/components/game/ParticipantsList.tsx">
import { Crown, Trophy, Users } from "lucide-react";
import { useTranslations } from "next-intl";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatRelativeDate } from "@/lib/utils";
import { Role } from "@/types/common";
⋮----
export interface Participant {



  id: string;



  username: string;



  role?: Role;



  joinedAt?: Date;



  completedLines: number;



  submissionCount: number;



  lastCompletedAt?: Date | null;
}
⋮----
export interface ParticipantsListProps {



  participants: Participant[];



  currentUserId?: string;



  className?: string;
}
⋮----
const getRoleBadge = (role?: Role) =>
</file>

<file path="src/components/game/SubmissionResult.tsx">
import { AlertTriangle, CheckCircle, XCircle } from "lucide-react";
import { useTranslations } from "next-intl";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import type { AcceptanceStatus } from "@/types/common";
⋮----
export interface SubmissionResultProps {



  confidence: number;



  critique: string;



  acceptanceStatus: AcceptanceStatus;



  matchedCellId?: string | null;



  matchedCellSubject?: string | null;



  confidenceThreshold: number;



  imageUrl?: string;



  className?: string;
}
⋮----
const getStatusConfig = () =>
⋮----
<StatusIcon className=
</file>

<file path="src/app/api/game/[gameId]/submission/[submissionId]/route.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminBatchService,
  AdminGameParticipationService,
  AdminSubmissionService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { ProcessingStatus } from "@/types/common";
import { type Submission, submissionSchema } from "@/types/schema";
⋮----
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string; submissionId: string }> },
): Promise<NextResponse<ApiResponse<Submission>>>
⋮----
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string; submissionId: string }> },
): Promise<NextResponse<ApiResponse<Submission>>>
</file>

<file path="src/app/api/game/create/route.ts">
import { FieldValue } from "firebase-admin/firestore";
import { customAlphabet } from "nanoid";
import { type NextRequest, NextResponse } from "next/server";
import { ulid } from "ulid";
import { z } from "zod";
import { GAME_ID_LENGTH } from "../../../../lib/constants";
import { adminAuth, adminFirestore } from "../../../../lib/firebase/admin";
import { AdminGameService } from "../../../../lib/firebase/admin-collections";
import { type ApiResponse, GameStatus, Role } from "../../../../types/common";
import { convertTimestampsToDate } from "../../../../types/firestore";
import {
  cellToFirestore,
  eventToFirestore,
  gameParticipationToFirestore,
  gameToFirestore,
  playerBoardToFirestore,
} from "../../../../types/game";
import {
  type Cell,
  type CompletedLine,
  cellSchema,
  type Event,
  type Game,
  type GameParticipation,
  gameCreationSchema,
  type PlayerBoard,
} from "../../../../types/schema";
⋮----
function generateGameId(isTest = false): string
⋮----
async function gameIdExists(gameId: string): Promise<boolean>
⋮----
async function generateUniqueGameId(isTest = false): Promise<string>
⋮----
export async function POST(
  request: NextRequest,
): Promise<NextResponse<ApiResponse<
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## プロジェクト概要

Pingoは、AIによる画像判定を活用したビンゴゲームです。
プレイヤーが写真を撮影し、AIが被写体を判定してビンゴを楽しめるシステムです。

## プロジェクトルール

- ユーザとの応答は必ず **日本語で対応** せよ
  - **質問を先にする** - 指示が不明確な場合は実装前に確認
  - **不確かな情報は必ず確認してから回答** せよ（特に日付、バージョン情報、コマンド名など）
    - **最新ドキュメントを読む** - 外部サービス連携前に公式ドキュメントを確認
    - 現在は2025年10月、Claude Codeの知識はここから1年ほど古い
    - ユーザから提示されたURLは必ず参照せよ
    - Playwright, Context 7, Serena等のMCPを積極的に活用せよ
- **全コメントは英語** - "何を"ではなく"なぜ"を説明
- **作業前に必ずGitブランチを作成** せよ
  - Issue番号がある場合: `{0埋め3桁のIssue番号}_機能名` 形式でブランチを作成
  - 例: Issue #19の場合は `019_prepare_github_actions` のようなブランチ名
  - mainブランチで直接作業することは厳禁
- **既存の実装パターンを必ず確認** せよ
  - 新しい機能を追加する前に、必ず既存コードの実装パターンを確認すること
- **型安全性が重要** - TypeScriptを厳密に使用
- **全てをテストする** - テストが通るまで次に進まない
  - テスト用のユーザ
    - demo / daredem0
    - demo1 / daredem0
    - demo2 / daredem0
    - demo3 / daredem0
- **標準ライブラリ優先** - 可能な限り標準ライブラリを使用
- **Linter警告を無視しない**
- **全コンポーネントにStorybookストーリーが必要**

## 主要技術仕様

### 技術スタック

- **フロントエンド**: Next.js 15 + React 19 + TypeScript 5
- **バックエンド**: Node.js 22 + Firebase/Firestore + Google Cloud Storage  
- **AI**: Google Gemini API
- **UI**: shadcn/ui + Tailwind CSS
- **テスト**: Vitest
- **多言語**: next-intl（日本語・英語）

### アーキテクチャ

- App Router（Next.js 15）
- GeminiによるサーバーサイドAI処理
- Firestoreリスナーによるリアルタイム更新
- 署名付きURLによる直接GCSアップロード
- ゲームID以外はすべてULID使用

## 優先タスク

### テストカバレッジ（高）

以下の重要コンポーネントでテストが不足:

- `src/components/game/ImageUpload.tsx`
- `src/services/image-upload.ts`
- `src/app/api/image/upload/route.ts`
- `src/app/api/game/[gameId]/submission/analyze/route.ts`

### セキュリティ・本番対応（高）

- APIキーのセキュリティレビュー
- デバッグログの削除

## メモリーバンクファイル

`docs/`内の主要ドキュメント:

- `ProjectBrief.md` - プロジェクトの目標と要件
- `TechnicalSpecification.md` - 完全な技術仕様  
- `Progress.md` - 現在の状況と次のステップ
- `Archived_YYYYMMDD.md` - 過去の開発履歴

## 開発時の注意事項

- **モバイルファースト設計** - 主にスマートフォンを対象
- **ファミリーフレンドリー** - 全年齢対象のコンテンツ
- **多言語対応** - 日本語メイン、英語サブ
- **リアルタイム** - Firestoreリスナーでゲーム状況を即座に反映
- **AI駆動** - 被写体候補生成と画像解析にGeminiを使用

## リファレンス

- [Tailwind CSS](https://tailwindcss.com/docs/installation/using-vite)
</file>

<file path="src/app/api/game/[gameId]/submission/route.ts">
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";
import { ulid } from "ulid";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameParticipationService,
  AdminGameService,
  AdminSubmissionService,
} from "@/lib/firebase/admin-collections";
import type { ApiResponse } from "@/types/common";
import { ProcessingStatus } from "@/types/common";
import { type Submission, submissionSchema } from "@/types/schema";
⋮----
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<Submission>>>
⋮----
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ gameId: string }> },
): Promise<NextResponse<ApiResponse<Submission[]>>>
</file>

<file path="src/app/game/join/page.tsx">
import { zodResolver } from "@hookform/resolvers/zod";
import { useRouter } from "next/navigation";
import { useLocale, useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { type SubmitHandler, useForm } from "react-hook-form";
import { z } from "zod";
import { AuthGuard } from "@/components/auth/AuthGuard";
import { GameInfoCard } from "@/components/game/GameInfoCard";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { TranslatedFormMessage } from "@/components/ui/translated-form-message";
import { useAuth } from "@/contexts/AuthContext";
import { useGameJoin } from "@/hooks/useGameJoin";
import { useParticipatingGames } from "@/hooks/useParticipatingGames";
import { GAME_ID_LENGTH, GAME_ID_PATTERN } from "@/lib/constants";
import { auth } from "@/lib/firebase/client";
import type { GameInfo } from "@/types/schema";
⋮----
type JoinGameFormValues = z.infer<typeof joinGameSchema>;
⋮----
// Watch the gameId field for changes
⋮----
const fetchAvailableGames = async () =>
⋮----
const handleGameIdChange = (value: string) =>
⋮----
const verifyGame = async () =>
⋮----
const onSubmit: SubmitHandler<JoinGameFormValues> = async (data) =>
⋮----
<form onSubmit=
⋮----
<CardTitle>
⋮----

⋮----
router.push(`/game/$
⋮----
onClick=
⋮----
const result = await joinGame(game.id);
if (result.success)
</file>

<file path="src/components/game/ImageUpload.tsx">
import { Image as ImageIcon, Loader2, Upload, X } from "lucide-react";
import Image from "next/image";
import { useTranslations } from "next-intl";
import { useCallback, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useAuth } from "@/contexts/AuthContext";
import {
  createImagePreviewUrl,
  isValidFileSize,
  isValidImageFile,
  processImage,
  revokeImagePreviewUrl,
} from "@/lib/image-utils";
import { cn } from "@/lib/utils";
import { submitImage } from "@/services/image-upload";
import type {
  ImageSubmissionResult,
  ImageUploadProps,
  ProcessedImage,
} from "@/types/schema";
⋮----
interface ImagePreview {
  file: File;
  previewUrl: string;
  processedImage?: ProcessedImage;
  error?: string;
}
⋮----
// Create preview URL from processed JPEG blob
⋮----
// For other formats, create preview first then process
⋮----
// Process image
⋮----
// Handle upload
⋮----
console.error("Image preview error:", error);
⋮----
e.stopPropagation();
handleUpload();
</file>

<file path="src/components/layout/UserMenu.tsx">
import { Languages, LogOut, User as UserIcon } from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useLocale, useTranslations } from "next-intl";
import type { ReactElement } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/contexts/AuthContext";
import { useParticipatingGames } from "@/hooks/useParticipatingGames";
import { setUserLocale } from "@/services/locale";
⋮----
const toggleLocale = async (): Promise<void> =>
⋮----
const handleLogout = async (): Promise<void> =>
</file>

<file path="src/types/schema.ts">
import { z } from "zod";
import {
  AcceptanceStatus,
  GameStatus,
  LineType,
  NotificationDisplayType,
  NotificationType,
  ProcessingStatus,
  Role,
} from "./common";
⋮----
export interface ImageProcessingOptions {



  maxLongSide: number;



  quality: number;



  format: "image/jpeg";
}
⋮----
export interface ProcessedImage {



  blob: Blob;



  originalName: string;



  originalSize: number;



  processedSize: number;



  originalDimensions: {
    width: number;
    height: number;
  };



  processedDimensions: {
    width: number;
    height: number;
  };
}
⋮----
export interface ImageUploadProps {
  gameId: string;
  onImageProcessed?: (processedImage: ProcessedImage) => void;
  onUploadStart?: () => void;
  onUploadComplete?: (
    success: boolean,
    result?: ImageSubmissionResult,
    error?: string,
  ) => void;
  isUploading?: boolean;
  className?: string;
  disabled?: boolean;
}
⋮----
export type User = z.infer<typeof userSchema>;
export type UserCreationData = z.infer<typeof userCreationSchema>;
export type UserLoginData = z.infer<typeof userLoginSchema>;
export type Notification = z.infer<typeof notificationSchema>;
export type GameParticipation = z.infer<typeof gameParticipationSchema>;
export type Cell = z.infer<typeof cellSchema>;
export type CellState = z.infer<typeof cellStateSchema>;
export type CompletedLine = z.infer<typeof completedLineSchema>;
export type PlayerBoard = z.infer<typeof playerBoardSchema>;
export type GameBoard = z.infer<typeof gameBoardSchema>;
export type Game = z.infer<typeof gameSchema>;
export type GameCreationData = z.infer<typeof gameCreationSchema>;
export type Submission = z.infer<typeof submissionSchema>;
export type Event = z.infer<typeof eventSchema>;
export type ImageSubmissionData = z.infer<typeof imageSubmissionDataSchema>;
export type ImageSubmissionResult = z.infer<typeof imageSubmissionResultSchema>;
export type AnalysisResult = z.infer<typeof analysisResultSchema>;
⋮----
export interface GameInfo {
  id: string;
  title: string;
  theme: string;
  notes?: string;
  participantCount?: number;
  createdAt: Date | null;
  expiresAt: Date | null;
  isPublic?: boolean;
  isParticipating?: boolean;
}
</file>

<file path="src/app/api/image/check/route.ts">
import { GoogleGenAI, Type } from "@google/genai";
import { type NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { adminAuth } from "@/lib/firebase/admin";
import {
  AdminGameBoardService,
  AdminGameService,
  AdminPlayerBoardService,
  AdminTransactionService,
} from "@/lib/firebase/admin-collections";
import { AcceptanceStatus, LineType, ProcessingStatus } from "@/types/common";
import type {
  Cell,
  CompletedLine,
  PlayerBoard,
  Submission,
} from "@/types/schema";
⋮----
interface ImageCheckResponse {
  appropriate: boolean;
  confidence: number | null;
  matchedCellId: string | null;
  acceptanceStatus: AcceptanceStatus;
  critique: string | null;
  newlyCompletedLines: number;
  totalCompletedLines: number;
  requiredBingoLines: number;
  reason?: string;
}
⋮----
function detectCompletedLines(
  gameBoard: { cells: Cell[] },
  playerBoard: PlayerBoard,
): CompletedLine[]
⋮----
export async function POST(request: NextRequest)
</file>

<file path="src/app/game/[gameId]/page.tsx">
import { useParams, useRouter } from "next/navigation";
import { useTranslations } from "next-intl";
import { useEffect, useRef } from "react";
import { AuthGuard } from "@/components/auth/AuthGuard";
import { BingoBoard } from "@/components/game/BingoBoard";
import { GameInfo } from "@/components/game/GameInfo";
import { ImageUpload } from "@/components/game/ImageUpload";
import { ParticipantsList } from "@/components/game/ParticipantsList";
import { SubmissionResult } from "@/components/game/SubmissionResult";
import { Confetti, type ConfettiRef } from "@/components/magicui/confetti";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useAuth } from "@/contexts/AuthContext";
import { useGameParticipation } from "@/hooks/useGameParticipation";
import { AcceptanceStatus } from "@/types/common";
import { ErrorDisplay } from "./components/ErrorDisplay";
import { GameHeader } from "./components/GameHeader";
import { useGameData } from "./hooks/useGameData";
import { useImageSubmission } from "./hooks/useImageSubmission";
import {
  convertCellStatesToBingoFormat,
  convertCompletedLinesToIndices,
  findMatchedCellSubject,
  getLatestSubmission,
} from "./utils/gameDataTransforms";
⋮----
{/* Game information */}
⋮----
{/* Participants list */}
</file>

<file path="src/lib/firebase/admin-collections.ts">
import { Role } from "../../types/common";
import {
  dateToTimestamp,
  type TimestampInterface,
} from "../../types/firestore";
import {
  type EventDocument,
  eventFromFirestore,
  eventToFirestore,
  type GameBoardDocument,
  type GameDocument,
  type GameParticipationDocument,
  gameBoardFromFirestore,
  gameFromFirestore,
  gameParticipationFromFirestore,
  gameToFirestore,
  type PlayerBoardDocument,
  playerBoardFromFirestore,
  playerBoardToFirestore,
  type SubmissionDocument,
  submissionFromFirestore,
  submissionToFirestore,
} from "../../types/game";
import type {
  Event,
  Game,
  GameBoard,
  GameParticipation,
  PlayerBoard,
  Submission,
  User,
} from "../../types/schema";
import {
  type UserDocument,
  userFromFirestore,
  userToFirestore,
} from "../../types/user";
import { adminFirestore } from "./admin";
⋮----
export async function getGame(gameId: string): Promise<Game | null>
⋮----
export async function gameExists(gameId: string): Promise<boolean>
⋮----
export async function updateGame(gameId: string, game: Game): Promise<void>
⋮----
export async function getPublicGames(): Promise<Game[]>
⋮----
export async function getParticipant(
    gameId: string,
    userId: string,
): Promise<GameParticipation | null>
⋮----
export async function isParticipant(
    gameId: string,
    userId: string,
): Promise<boolean>
⋮----
export async function isGameAdmin(
    gameId: string,
    userId: string,
): Promise<boolean>
⋮----
export async function getParticipantCount(gameId: string): Promise<number>
⋮----
export async function getParticipants(gameId: string): Promise<
    Array<{
      id: string;
      username: string;
      completedLines: number;
      submissionCount: number;
    }>
  > {

    const participationsSnapshot = await adminFirestore
      .collection("games")
      .doc(gameId)
      .collection("participants")
      .get();
⋮----
export async function getSubmissionCount(
    gameId: string,
    userId: string,
): Promise<number>
⋮----
export async function getSubmission(
    gameId: string,
    submissionId: string,
): Promise<Submission | null>
⋮----
export async function createSubmission(
    gameId: string,
    submission: Submission,
): Promise<void>
⋮----
export async function updateSubmission(
    gameId: string,
    submissionId: string,
    submission: Submission,
): Promise<void>
⋮----
export async function getSubmissions(
    gameId: string,
    options: {
      userId?: string;
      limit?: number;
      offset?: number;
    } = {},
): Promise<Submission[]>
⋮----
export async function submissionExists(
    gameId: string,
    submissionId: string,
): Promise<boolean>
⋮----
export async function getPlayerBoard(
    gameId: string,
    userId: string,
): Promise<PlayerBoard | null>
⋮----
export async function updatePlayerBoard(
    gameId: string,
    userId: string,
    playerBoard: PlayerBoard,
): Promise<void>
⋮----
export async function playerBoardExists(
    gameId: string,
    userId: string,
): Promise<boolean>
⋮----
export async function getEvents(
    gameId: string,
    options: {
      eventType?: string;
      userId?: string;
      limit?: number;
      offset?: number;
    } = {},
): Promise<Event[]>
⋮----
export async function createEvent(
    gameId: string,
    event: Event,
): Promise<void>
⋮----
export async function getGameBoard(
    gameId: string,
): Promise<GameBoard | null>
⋮----
export async function gameBoardExists(gameId: string): Promise<boolean>
⋮----
export async function getUser(userId: string): Promise<User | null>
⋮----
export async function getUserByUsername(
    username: string,
): Promise<User | null>
⋮----
export async function getUserDocumentByUsername(
    username: string,
): Promise<UserDocument | null>
⋮----
export async function getUserDocumentById(
    userId: string,
): Promise<UserDocument | null>
⋮----
export async function createUser(
    user: User,
    passwordHash?: string,
): Promise<void>
⋮----
export async function updateUser(userId: string, user: User): Promise<void>
⋮----
export async function userExists(userId: string): Promise<boolean>
⋮----
export async function isUsernameTaken(username: string): Promise<boolean>
⋮----
export async function updateLastLogin(userId: string): Promise<void>
⋮----
export async function updateUserPartial(
    userId: string,
    updates: Record<string, unknown>,
): Promise<void>
⋮----
export async function getGameSubmissionContext(
    gameId: string,
    userId: string,
    submissionId: string,
): Promise<
⋮----
export async function createSubmissionAndUpdateBoard(
    gameId: string,
    submission: Submission,
    playerBoard: PlayerBoard,
    userId: string,
): Promise<
⋮----
export async function createSubmissionOnly(
    gameId: string,
    submission: Submission,
): Promise<
⋮----
export async function joinGame(
    gameId: string,
    userId: string,
    eventId: string,
): Promise<
</file>

<file path="package.json">
{
  "name": "pingo",
  "version": "0.1.0",
  "private": true,
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shin-sforzando/pingo.git"
  },
  "scripts": {
    "dev": "next dev --turbopack",
    "prebuild": "rm -rf .next node_modules/.cache .turbo",
    "build": "next build",
    "start": "next start",
    "check": "biome check --write --unsafe --verbose",
    "check:i18n": "i18n-check --source ja --locales messages && i18n-check --source en --locales messages",
    "test": "vitest",
    "test:watch": "vitest --no-coverage",
    "test:once": "vitest run",
    "test:e2e": "playwright test",
    "test:e2e:debug": "playwright test --headed --debug",
    "test:e2e:mobile": "playwright test --project=\"Mobile Safari\"",
    "storybook": "storybook dev --port 6006 --no-open",
    "build-storybook": "storybook build",
    "docker": "npm run docker:build -- --run",
    "docker:build": "npx tsx scripts/docker-build.ts",
    "ncu": "npx npm-check-updates",
    "knip": "npx knip",
    "repomix": "npx repomix"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@google/genai": "^1.19.0",
    "@hookform/resolvers": "^5.2.2",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "bcrypt": "^6.0.0",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "firebase": "^12.2.1",
    "firebase-admin": "^13.5.0",
    "heic2any": "^0.0.4",
    "lucide-react": "^0.544.0",
    "motion": "^12.23.12",
    "next": "^15.5.3",
    "next-intl": "^4.3.8",
    "qrcode.react": "^4.2.0",
    "react": "^19.1.1",
    "react-day-picker": "^9.10.0",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.62.0",
    "tailwind-merge": "^3.3.1",
    "ulid": "^3.0.1",
    "uuid": "^13.0.0",
    "vaul": "^1.1.2",
    "zod": "^4.1.8"
  },
  "devDependencies": {
    "@biomejs/biome": "2.2.4",
    "@faker-js/faker": "^10.0.0",
    "@lingual/i18n-check": "^0.8.7",
    "@playwright/test": "^1.55.0",
    "@storybook/addon-a11y": "^9.1.6",
    "@storybook/addon-docs": "^9.1.6",
    "@storybook/addon-onboarding": "^9.1.6",
    "@storybook/nextjs": "^9.1.6",
    "@tailwindcss/postcss": "^4",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/react": "^16.3.0",
    "@types/bcrypt": "^6.0.0",
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^24",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/uuid": "^10.0.0",
    "@vitejs/plugin-react": "^5.0.2",
    "@vitest/browser": "^3.2.4",
    "@vitest/coverage-istanbul": "^3.2.4",
    "dotenv": "^17.2.2",
    "jsdom": "^27.0.0",
    "knip": "^5.63.1",
    "lefthook": "^1.13.0",
    "playwright": "^1.55.0",
    "storybook": "^9.1.6",
    "storybook-next-intl": "^2.0.13",
    "tailwindcss": "^4",
    "tsx": "^4.20.5",
    "tw-animate-css": "^1.3.8",
    "typescript": "^5",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.2.4",
    "vitest-browser-react": "^1.0.1"
  }
}
</file>

</files>
